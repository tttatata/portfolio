{"ast":null,"code":"import { useOverlayTriggerState as $9Xvoh$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useState as $9Xvoh$useState, useMemo as $9Xvoh$useMemo, useCallback as $9Xvoh$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {\n  let overlayTriggerState = (0, $9Xvoh$useOverlayTriggerState)(props);\n  let [focusStrategy, setFocusStrategy] = (0, $9Xvoh$useState)(null);\n  let [expandedKeysStack, setExpandedKeysStack] = (0, $9Xvoh$useState)([]);\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n  let openSubmenu = (triggerKey, level) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) return oldStack;\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n  let closeSubmenu = (triggerKey, level) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) return oldStack.slice(0, level);else return oldStack;\n    });\n  };\n  return {\n    focusStrategy: focusStrategy,\n    ...overlayTriggerState,\n    open() {\n      let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle() {\n      let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    UNSTABLE_expandedKeysStack: expandedKeysStack,\n    UNSTABLE_openSubmenu: openSubmenu,\n    UNSTABLE_closeSubmenu: closeSubmenu\n  };\n}\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $e5614764aa47eb35$export$d39fdbfa42246ac4(props, state) {\n  let {\n    triggerKey: triggerKey\n  } = props;\n  let {\n    UNSTABLE_expandedKeysStack: UNSTABLE_expandedKeysStack,\n    UNSTABLE_openSubmenu: UNSTABLE_openSubmenu,\n    UNSTABLE_closeSubmenu: UNSTABLE_closeSubmenu,\n    close: closeAll\n  } = state;\n  let [submenuLevel] = (0, $9Xvoh$useState)(UNSTABLE_expandedKeysStack === null || UNSTABLE_expandedKeysStack === void 0 ? void 0 : UNSTABLE_expandedKeysStack.length);\n  let isOpen = (0, $9Xvoh$useMemo)(() => UNSTABLE_expandedKeysStack[submenuLevel] === triggerKey, [UNSTABLE_expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = (0, $9Xvoh$useState)(null);\n  let open = (0, $9Xvoh$useCallback)(function () {\n    let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    setFocusStrategy(focusStrategy);\n    UNSTABLE_openSubmenu(triggerKey, submenuLevel);\n  }, [UNSTABLE_openSubmenu, submenuLevel, triggerKey]);\n  let close = (0, $9Xvoh$useCallback)(() => {\n    setFocusStrategy(null);\n    UNSTABLE_closeSubmenu(triggerKey, submenuLevel);\n  }, [UNSTABLE_closeSubmenu, submenuLevel, triggerKey]);\n  let toggle = (0, $9Xvoh$useCallback)(function () {\n    let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    setFocusStrategy(focusStrategy);\n    if (isOpen) close();else open(focusStrategy);\n  }, [close, open, isOpen]);\n  return (0, $9Xvoh$useMemo)(() => ({\n    focusStrategy: focusStrategy,\n    isOpen: isOpen,\n    open: open,\n    close: close,\n    closeAll: closeAll,\n    submenuLevel: submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle: toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\nexport { $a28c903ee9ad8dc5$export$79fefeb1c2091ac3 as useMenuTriggerState, $e5614764aa47eb35$export$d39fdbfa42246ac4 as UNSTABLE_useSubmenuTriggerState };","map":{"version":3,"names":["$a28c903ee9ad8dc5$export$79fefeb1c2091ac3","props","overlayTriggerState","$9Xvoh$useOverlayTriggerState","focusStrategy","setFocusStrategy","$9Xvoh$useState","expandedKeysStack","setExpandedKeysStack","closeAll","close","openSubmenu","triggerKey","level","oldStack","length","slice","closeSubmenu","key","open","arguments","undefined","toggle","UNSTABLE_expandedKeysStack","UNSTABLE_openSubmenu","UNSTABLE_closeSubmenu","$e5614764aa47eb35$export$d39fdbfa42246ac4","state","submenuLevel","isOpen","$9Xvoh$useMemo","$9Xvoh$useCallback","setOpen"],"sources":["D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\index.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useMenuTriggerState.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useSubmenuTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useMenuTriggerState} from './useMenuTriggerState';\nexport {UNSTABLE_useSubmenuTriggerState} from './useSubmenuTriggerState';\n\nexport type {MenuTriggerProps} from '@react-types/menu';\nexport type {MenuTriggerState, RootMenuTriggerState} from './useMenuTriggerState';\nexport type {SubmenuTriggerProps, SubmenuTriggerState} from './useSubmenuTriggerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\nexport interface RootMenuTriggerState extends MenuTriggerState {\n  /** Opens a specific submenu tied to a specific menu item at a specific level. */\n  UNSTABLE_openSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** Closes a specific submenu tied to a specific menu item at a specific level. */\n  UNSTABLE_closeSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** An array of open submenu trigger keys within the menu tree.\n   * The index of key within array matches the submenu level in the tree.\n   */\n  UNSTABLE_expandedKeysStack: Key[],\n\n  /** Closes the menu and all submenus in the menu tree. */\n  close: () => void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens. Also tracks the open submenus within\n * the menu tree via their trigger keys.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): RootMenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n  let [expandedKeysStack, setExpandedKeysStack] = useState<Key[]>([]);\n\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n\n  let openSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) {\n        return oldStack;\n      }\n\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n\n  let closeSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) {\n        return oldStack.slice(0, level);\n      } else {\n        return oldStack;\n      }\n    });\n  };\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    UNSTABLE_expandedKeysStack: expandedKeysStack,\n    UNSTABLE_openSubmenu: openSubmenu,\n    UNSTABLE_closeSubmenu: closeSubmenu\n  };\n}\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport type {OverlayTriggerState} from '@react-stately/overlays';\nimport {RootMenuTriggerState} from './useMenuTriggerState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface SubmenuTriggerProps {\n  /** Key of the trigger item. */\n  triggerKey: Key\n}\n\nexport interface SubmenuTriggerState extends OverlayTriggerState {\n  /** Whether the submenu is currently open. */\n  isOpen: boolean,\n  /** Controls which item will be auto focused when the submenu opens. */\n  focusStrategy: FocusStrategy | null,\n  /** Opens the submenu. */\n  open: (focusStrategy?: FocusStrategy | null) => void,\n  /** Closes the submenu. */\n  close: () => void,\n  /** Closes all menus and submenus in the menu tree. */\n  closeAll: () => void,\n  /** The level of the submenu. */\n  submenuLevel: number,\n  /** Toggles the submenu. */\n  toggle: (focusStrategy?: FocusStrategy | null) => void,\n  /** @private */\n  setOpen: () => void\n}\n\n/**\n * Manages state for a submenu trigger. Tracks whether the submenu is currently open, the level of the submenu, and\n * controls which item will receive focus when it opens.\n */\nexport function UNSTABLE_useSubmenuTriggerState(props: SubmenuTriggerProps, state: RootMenuTriggerState): SubmenuTriggerState  {\n  let {triggerKey} = props;\n  let {UNSTABLE_expandedKeysStack, UNSTABLE_openSubmenu, UNSTABLE_closeSubmenu, close: closeAll} = state;\n  let [submenuLevel] = useState(UNSTABLE_expandedKeysStack?.length);\n  let isOpen = useMemo(() => UNSTABLE_expandedKeysStack[submenuLevel] === triggerKey, [UNSTABLE_expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  let open = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    UNSTABLE_openSubmenu(triggerKey, submenuLevel);\n  }, [UNSTABLE_openSubmenu, submenuLevel, triggerKey]);\n\n  let close = useCallback(() => {\n    setFocusStrategy(null);\n    UNSTABLE_closeSubmenu(triggerKey, submenuLevel);\n  }, [UNSTABLE_closeSubmenu, submenuLevel, triggerKey]);\n\n  let toggle = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    if (isOpen) {\n      close();\n    } else {\n      open(focusStrategy);\n    }\n  }, [close, open, isOpen]);\n\n  return useMemo(() => ({\n    focusStrategy,\n    isOpen,\n    open,\n    close,\n    closeAll,\n    submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}