{"ast":null,"code":"import { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nclass $c74cda7d31af1253$export$c84671f46d6a1ca {\n  /**\n  * Returns whether the layout should invalidate in response to\n  * visible rectangle changes. By default, it only invalidates\n  * when the collection view's size changes. Return true always\n  * to make the layout invalidate while scrolling (e.g. sticky headers).\n  */\n  shouldInvalidate(newRect, oldRect) {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n  }\n  /**\n  * This method allows the layout to perform any pre-computation\n  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n  * Called by the collection view before {@link getVisibleLayoutInfos}\n  * or {@link getLayoutInfo} are called.\n  */\n  validate(invalidationContext) {}\n  /**\n  * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n  * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n  * @param point The point at which the drag occurred.\n  */ // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n  /**\n  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n  * to reject the drop. The dropped items will be inserted before the resulting target.\n  * @param point The point at which the drop occurred.\n  */ // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n  /**\n  * Returns the starting attributes for an animated insertion.\n  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n  * The default implementation just returns its input.\n  *\n  * @param layoutInfo The proposed LayoutInfo for this view.\n  */\n  getInitialLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n  /**\n  * Returns the ending attributes for an animated removal.\n  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n  * to the one returned by this method. The default implementation returns its input.\n  *\n  * @param layoutInfo The original LayoutInfo for this view.\n  */\n  getFinalLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $d7fd61009c21d0bb$export$7e0eeb9da702a085 {\n  /**\n  * Returns a copy of the LayoutInfo.\n  */\n  copy() {\n    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n  /**\n  * @param type A string representing the view type. Should be `'item'` for item views.\n                          Other types are used by supplementary views.\n  * @param key The unique key for this view.\n  * @param rect The rectangle describing the size and position of this view.\n  */\n  constructor(type, key, rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $3041db3296945e6e$export$baf26146a414f24a {\n  /**\n  * Returns a copy of this point.\n  */\n  copy() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n  }\n  /**\n  * Checks if two points are equal.\n  */\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  /**\n  * Returns true if this point is the origin.\n  */\n  isOrigin() {\n    return this.x === 0 && this.y === 0;\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = x;\n    this.y = y;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $60423f92c7f9ad87$export$c79fc6492f3af13d {\n  /**\n  * The maximum x-coordinate in the rectangle.\n  */\n  get maxX() {\n    return this.x + this.width;\n  }\n  /**\n  * The maximum y-coordinate in the rectangle.\n  */\n  get maxY() {\n    return this.y + this.height;\n  }\n  /**\n  * The area of the rectangle.\n  */\n  get area() {\n    return this.width * this.height;\n  }\n  /**\n  * The top left corner of the rectangle.\n  */\n  get topLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n  }\n  /**\n  * The top right corner of the rectangle.\n  */\n  get topRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n  }\n  /**\n  * The bottom left corner of the rectangle.\n  */\n  get bottomLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n  }\n  /**\n  * The bottom right corner of the rectangle.\n  */\n  get bottomRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n  }\n  /**\n  * Returns whether this rectangle intersects another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  intersects(rect) {\n    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n  }\n  /**\n  * Returns whether this rectangle fully contains another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  containsRect(rect) {\n    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n  }\n  /**\n  * Returns whether the rectangle contains the given point.\n  * @param point - The point to check.\n  */\n  containsPoint(point) {\n    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n  }\n  /**\n  * Returns the first corner of this rectangle (from top to bottom, left to right)\n  * that is contained in the given rectangle, or null of the rectangles do not intersect.\n  * @param rect - The rectangle to check.\n  */\n  getCornerInRect(rect) {\n    for (let key of [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]) {\n      if (rect.containsPoint(this[key])) return key;\n    }\n    return null;\n  }\n  equals(rect) {\n    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  }\n  pointEquals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  sizeEquals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n  /**\n  * Returns the union of this Rect and another.\n  */\n  union(other) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n  }\n  /**\n  * Returns the intersection of this Rect with another.\n  * If the rectangles do not intersect, an all zero Rect is returned.\n  */\n  intersection(other) {\n    if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n  }\n  /**\n  * Returns a copy of this rectangle.\n  */\n  copy() {\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n  }\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {\n  /**\n  * Returns a copy of this size.\n  */\n  copy() {\n    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n  }\n  /**\n  * Returns whether this size is equal to another one.\n  */\n  equals(other) {\n    return this.width === other.width && this.height === other.height;\n  }\n  /**\n  * The total area of the Size.\n  */\n  get area() {\n    return this.width * this.height;\n  }\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.width = width;\n    this.height = height;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nlet $ad1d98aa8f0c31b4$var$KEY = 0;\nclass $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  /**\n  * Prepares the view for reuse. Called just before the view is removed from the DOM.\n  */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n  constructor(virtualizer) {\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n// use high res timer if available\nlet $3eb131dcf37ad5f8$var$perf = typeof window !== \"undefined\" ? window.performance : null;\n// @ts-ignore\nlet $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nlet $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nlet $3eb131dcf37ad5f8$var$fixTs;\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  let canceled = false;\n  let raf_id;\n  let promise = new Promise(resolve => {\n    let start = $3eb131dcf37ad5f8$var$getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n  return promise;\n}\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  let res = new Set();\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  let toUpdate = new Set();\n  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction* $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n    iterators[_key] = arguments[_key];\n  }\n  for (let iterator of iterators) yield* iterator;\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  let res = {};\n  for (let key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  for (let key of a) {\n    if (!b.has(key)) return false;\n  }\n  return true;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $364191b3decf3697$var$RollingAverage {\n  addSample(sample) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n  constructor() {\n    this.count = 0;\n    this.value = 0;\n  }\n}\nclass $364191b3decf3697$export$4455ee6afb38dcbb {\n  setVisibleRect(rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n    }\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) this.averagePerf.addSample(time);\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n      this.overscanY.addSample(o);\n    }\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n      this.overscanX.addSample(o);\n    }\n  }\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n    return overscanned;\n  }\n  constructor() {\n    this.startTime = 0;\n    this.averagePerf = new $364191b3decf3697$var$RollingAverage();\n    this.averageTime = new $364191b3decf3697$var$RollingAverage();\n    this.velocity = new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5);\n    this.overscanX = new $364191b3decf3697$var$RollingAverage();\n    this.overscanY = new $364191b3decf3697$var$RollingAverage();\n    this.visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $8e135e531d8dcb66$export$febc5573c75cefb0 {\n  constructor() {\n    this.level = 0;\n    this.actions = [];\n    this.animated = true;\n    this.initialMap = new Map();\n    this.finalMap = new Map();\n    this.initialLayoutInfo = new Map();\n    this.finalLayoutInfo = new Map();\n    this.removed = new Map();\n    this.toRemove = new Map();\n  }\n}\nclass $38b9490c1cca8fc4$export$89be5a243e59c4b2 {\n  _setContentSize(size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n  _setContentOffset(offset) {\n    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n  /**\n  * Get the size of the scrollable content.\n  */\n  get contentSize() {\n    return this._contentSize;\n  }\n  /**\n  * Get the collection view's currently visible rectangle.\n  */\n  get visibleRect() {\n    return this._visibleRect;\n  }\n  /**\n  * Set the collection view's currently visible rectangle.\n  */\n  set visibleRect(rect) {\n    this._setVisibleRect(rect);\n  }\n  _setVisibleRect(rect) {\n    let forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let current = this._visibleRect;\n    // Ignore if the rects are equal\n    if (rect.equals(current)) return;\n    if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n    if (shouldInvalidate)\n      // We are already in a layout effect when this method is called, so relayoutNow is appropriate.\n      this.relayoutNow({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });else this.updateSubviews(forceUpdate);\n  }\n  get collection() {\n    return this._collection;\n  }\n  set collection(data) {\n    this._setData(data);\n  }\n  _setData(data) {\n    if (data === this._collection) return;\n    if (this._collection) this._runTransaction(() => {\n      this._collection = data;\n    }, this.transitionDuration > 0);else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n  /**\n  * Reloads the data from the data source and relayouts the collection view.\n  * Does not animate any changes. Equivalent to re-assigning the same data source\n  * to the collection view.\n  */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n  /**\n  * Returns the item with the given key.\n  */\n  getItem(key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys() {\n    return this._persistedKeys;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys) {\n    if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) return true;\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) while (k != null) {\n      let layoutInfo = this.layout.getLayoutInfo(k);\n      if (!layoutInfo) break;\n      k = layoutInfo.parentKey;\n      if (k === key) return true;\n    }\n    return false;\n  }\n  /**\n  * Get the collection view's layout.\n  */\n  get layout() {\n    return this._layout;\n  }\n  /**\n  * Set the collection view's layout.\n  */\n  set layout(layout) {\n    this.setLayout(layout);\n  }\n  /**\n  * Sets the collection view's layout, optionally with an animated transition\n  * from the current layout to the new layout.\n  * @param layout The layout to switch to.\n  * @param animated Whether to animate the layout change.\n  */\n  setLayout(layout) {\n    let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (layout === this._layout) return;\n    let applyLayout = () => {\n      if (this._layout)\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n    if (animated)\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n  _getReuseType(layoutInfo, content) {\n    if (layoutInfo.type === \"item\" && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : \"item\";\n      let reuseType = type === \"item\" ? \"item\" : layoutInfo.type + \"_\" + type;\n      return {\n        type: type,\n        reuseType: reuseType\n      };\n    }\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n  getReusableView(layoutInfo) {\n    let content = this.getItem(layoutInfo.key);\n    let {\n      reuseType: reuseType\n    } = this._getReuseType(layoutInfo, content);\n    if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);\n    view.viewType = reuseType;\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n    view.layoutInfo = layoutInfo;\n    this._renderView(view);\n    return view;\n  }\n  _renderView(reusableView) {\n    let {\n      type: type,\n      key: key\n    } = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n  _renderContent(type, content) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) return cached;\n    let rendered = this.delegate.renderView(type, content);\n    if (content) this._renderedContent.set(content, rendered);\n    return rendered;\n  }\n  /**\n  * Returns an array of all currently visible views, including both\n  * item views and supplementary views.\n  */\n  get visibleViews() {\n    return Array.from(this._visibleViews.values());\n  }\n  /**\n  * Gets the visible view for the given type and key. Returns null if\n  * the view is not currently visible.\n  *\n  * @param key The key of the view to retrieve.\n  */\n  getView(key) {\n    return this._visibleViews.get(key) || null;\n  }\n  /**\n  * Returns an array of visible views matching the given type.\n  * @param type The view type to find.\n  */\n  getViewsOfType(type) {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n  /**\n  * Returns the key for the given view. Returns null\n  * if the view is not currently visible.\n  */\n  keyForView(view) {\n    if (view && view.layoutInfo) return view.layoutInfo.key;\n    return null;\n  }\n  /**\n  * Returns the key for the item view currently at the given point.\n  */\n  keyAtPoint(point) {\n    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n    }\n    return null;\n  }\n  /**\n  * Cleanup for when the Virtualizer will be unmounted.\n  */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n  /**\n  * Triggers a layout invalidation, and updates the visible subviews.\n  */\n  relayout() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === \"undefined\") return;\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n    this._invalidationContext = context;\n  }\n  /**\n  * Performs a relayout immediately. Prefer {@link relayout} over this method\n  * where possible, since it coalesces multiple layout passes in the same tick.\n  */\n  relayoutNow() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {\n        ...this._invalidationContext,\n        ...context\n      };\n    }\n    // Reset the invalidation context\n    this._invalidationContext = null;\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) return;\n    let scrollAnchor = this._getScrollAnchor();\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === \"function\") context.beforeLayout();\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === \"function\") context.afterLayout();\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));\n    } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n      let done = () => {\n        this._disableTransitions();\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {\n            x: x,\n            y: y\n          } = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));\n        }\n        if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n      };\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n  }\n  /**\n  * Corrects DOM order of visible views to match item order of collection.\n  */\n  _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) return;\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n  _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n  _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n  _getScrollAnchor() {\n    if (!this.anchorScrollPosition) return null;\n    let visibleRect = this.getVisibleRect();\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {\n            key: key,\n            layoutInfo: layoutInfo,\n            corner: corner,\n            offset: offset\n          };\n        }\n      }\n    }\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor = null;\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || offset < cornerAnchor.offset) cornerAnchor = {\n            key: key,\n            layoutInfo: layoutInfo,\n            corner: corner,\n            offset: offset\n          };\n        }\n      }\n    }\n    return cornerAnchor;\n  }\n  _restoreScrollAnchor(scrollAnchor, context) {\n    let contentOffset = this.getVisibleRect();\n    if (scrollAnchor) {\n      var _context_transaction;\n      let finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n      if (finalAnchor) {\n        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n    return contentOffset;\n  }\n  getVisibleRect() {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);\n  }\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n  _getLayoutInfoMap(rect) {\n    let copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map();\n    for (let layoutInfo of layoutInfos) {\n      if (copy) layoutInfo = layoutInfo.copy();\n      map.set(layoutInfo.key, layoutInfo);\n    }\n    return map;\n  }\n  updateSubviews() {\n    let forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this._collection) return;\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({\n        toAdd: toAdd,\n        toRemove: toRemove,\n        toUpdate: toUpdate\n      } = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos));\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) continue;\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) toUpdate.delete(key);else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {\n            reuseType: reuseType\n          } = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) this._applyLayoutInfos();\n        return;\n      }\n    }\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set();\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) this._transaction.toRemove.set(key, view);else this.reuseView(view);\n      }\n    }\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view;\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) this._children.add(view);\n      }\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key);\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) this.removeViews(removed);\n    this._correctItemOrder();\n    this._flushVisibleViews();\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) requestAnimationFrame(() => {\n      // If we're in a transaction, apply animations to visible views\n      // and \"to be removed\" views, which animate off screen.\n      if (this._transaction) requestAnimationFrame(() => this._applyLayoutInfos());\n    });\n    return hasLayoutUpdates;\n  }\n  afterRender() {\n    if (this._transactionQueue.length > 0) this._processTransactionQueue();else if (this._invalidationContext) this.relayoutNow();\n    if (this.shouldOverscan) this._overscanManager.collectMetrics();\n  }\n  _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent hierarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this hierarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;\n      if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);\n      if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);\n    }\n    let buildTree = (parent, views) => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(parent, view, children, childViews => buildTree(view, childViews));\n    });\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n  _applyLayoutInfo(view, layoutInfo) {\n    if (view.layoutInfo === layoutInfo) return false;\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n  _applyLayoutInfos() {\n    let updated = false;\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n      }\n    }\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n        }\n      }\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n      }\n    }\n    if (updated) this._flushVisibleViews();\n  }\n  _hasLayoutUpdates() {\n    if (!this._transaction) return false;\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) return true;\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n      // Uses equals rather than pointEquals so that width/height changes are taken into account\n      !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n    }\n    return false;\n  }\n  reuseView(view) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n  removeViews(toRemove) {\n    for (let view of toRemove) this._children.delete(view);\n  }\n  updateItemSize(key, size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) return;\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) this.relayout();\n  }\n  startScrolling() {\n    this._isScrolling = true;\n  }\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n  _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n  /**\n  * Scrolls the item with the given key into view, optionally with an animation.\n  * @param key The key of the item to scroll into view.\n  * @param duration The duration of the scroll animation.\n  */\n  scrollToItem(key, options) {\n    // key can be 0, so check if null or undefined\n    if (key == null) return;\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) return;\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n    }\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n    }\n    return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);\n  }\n  /**\n  * Performs an animated scroll to the given offset.\n  * @param offset - The offset to scroll to.\n  * @param duration The duration of the animation.\n  * @returns A promise that resolves when the animation is complete.\n  */\n  scrollTo(offset) {\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n    this.startScrolling();\n    this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), offset => {\n      this._setContentOffset(offset);\n    });\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) this.updateItemSize(key, size);\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n    return this._scrollAnimation;\n  }\n  _runTransaction(action, animated) {\n    this._startTransaction();\n    if (this._nextTransaction) this._nextTransaction.actions.push(action);\n    this._endTransaction(animated);\n  }\n  _startTransaction() {\n    if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();\n    this._nextTransaction.level++;\n  }\n  _endTransaction(animated) {\n    if (!this._nextTransaction) return false;\n    // Save whether the transaction should be animated.\n    if (animated != null) this._nextTransaction.animated = animated;\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) return false;\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n    // Default animations to true\n    if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n    return true;\n  }\n  _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) return;\n    let next = this._transactionQueue.shift();\n    if (next) this._performTransaction(next);\n  }\n  _getContentRect() {\n    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n  _performTransaction(transaction) {\n    this._transaction = transaction;\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) action();\n      },\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else this._transaction = null;\n      },\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of (0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())) {\n          this._children.delete(view);\n          this.reuseView(view);\n        }\n        this._transaction = null;\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n        this._processTransactionQueue();\n      }\n    });\n  }\n  _setupTransactionAnimations(transaction) {\n    let {\n      initialMap: initialMap,\n      finalMap: finalMap\n    } = transaction;\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) if (finalMap.has(key))\n      // Store the initial layout info for use during animations.\n      transaction.initialLayoutInfo.set(key, layoutInfo);else\n      // This view was removed. Store the layout info for use\n      // in Layout#getFinalLayoutInfo during animations.\n      transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) if (!initialMap.has(key)) {\n      let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n      transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n    }\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews)\n    // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n    // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n    // added, removed... etc in a loop.\n    if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n      transaction.removed.set(key, view);\n      this._visibleViews.delete(key);\n      // In case something weird happened, where we have a view but no\n      // initial layout info, use the one attached to the view.\n      if (view.layoutInfo) {\n        if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n      }\n    }\n  }\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();\n    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n    var _options_transitionDuration;\n    // Set options from passed object if given\n    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of [\"delegate\", \"size\", \"layout\", \"collection\"]) if (options[key]) this[key] = options[key];\n  }\n}\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  let [visibleViews, setVisibleViews] = (0, $8D3nr$useState)([]);\n  let [contentSize, setContentSize] = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)());\n  let [isAnimating, setAnimating] = (0, $8D3nr$useState)(false);\n  let [isScrolling, setScrolling] = (0, $8D3nr$useState)(false);\n  let virtualizer = (0, $8D3nr$useMemo)(() => new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)(), []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  (0, $8D3nr$useLayoutEffect)(() => {\n    virtualizer.afterRender();\n  });\n  // eslint-disable-next-line arrow-body-style\n  (0, $8D3nr$useEffect)(() => {\n    return () => virtualizer.willUnmount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let setVisibleRect = (0, $8D3nr$useCallback)(rect => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = (0, $8D3nr$useCallback)(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = (0, $8D3nr$useCallback)(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n  let state = (0, $8D3nr$useMemo)(() => ({\n    virtualizer: virtualizer,\n    visibleViews: visibleViews,\n    setVisibleRect: setVisibleRect,\n    contentSize: contentSize,\n    isAnimating: isAnimating,\n    isScrolling: isScrolling,\n    startScrolling: startScrolling,\n    endScrolling: endScrolling\n  }), [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"names":["$c74cda7d31af1253$export$c84671f46d6a1ca","shouldInvalidate","newRect","oldRect","width","height","validate","invalidationContext","getInitialLayoutInfo","layoutInfo","getFinalLayoutInfo","$d7fd61009c21d0bb$export$7e0eeb9da702a085","copy","res","type","key","rect","estimatedSize","opacity","transform","parentKey","isSticky","zIndex","allowOverflow","constructor","$3041db3296945e6e$export$baf26146a414f24a","x","y","equals","point","isOrigin","arguments","length","undefined","$60423f92c7f9ad87$export$c79fc6492f3af13d","maxX","maxY","area","topLeft","topRight","bottomLeft","bottomRight","intersects","containsRect","containsPoint","getCornerInRect","pointEquals","sizeEquals","size","union","other","Math","min","max","intersection","$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec","$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","prepareForReuse","content","rendered","virtualizer","$3eb131dcf37ad5f8$var$perf","window","performance","$3eb131dcf37ad5f8$var$perfNow","now","webkitNow","msNow","mozNow","$3eb131dcf37ad5f8$var$getTime","bind","Date","getTime","$3eb131dcf37ad5f8$var$fixTs","$3eb131dcf37ad5f8$export$dc0b63720788090c","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","resolve","start","diffX","diffY","requestAnimationFrame","run","t","delta","proceed","cancel","cancelAnimationFrame","$3eb131dcf37ad5f8$export$77860c106b4a6a2e","$3eb131dcf37ad5f8$export$57636bb43b1ccbb0","sin","PI","$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","Set","keys","has","add","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","$fc36f9a046a9ce79$export$cfc14088dfefce5f","_len","iterators","Array","_key","iterator","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","$364191b3decf3697$var$RollingAverage","addSample","sample","count","value","$364191b3decf3697$export$4455ee6afb38dcbb","setVisibleRect","time","startTime","averageTime","visibleRect","velocity","collectMetrics","averagePerf","o","abs","overscanY","overscanX","getOverscannedRect","overscanned","round","$8e135e531d8dcb66$export$febc5573c75cefb0","level","actions","animated","initialMap","Map","finalMap","initialLayoutInfo","finalLayoutInfo","removed","$38b9490c1cca8fc4$export$89be5a243e59c4b2","_setContentSize","_contentSize","delegate","setContentSize","_setContentOffset","offset","_visibleRect","contentSize","_setVisibleRect","forceUpdate","current","shouldOverscan","_overscanManager","layout","_resetAnimatedContentOffset","relayoutNow","offsetChanged","sizeChanged","updateSubviews","collection","_collection","data","_setData","_runTransaction","transitionDuration","reloadData","relayout","contentChanged","getItem","persistedKeys","_persistedKeys","isPersistedKey","k","getLayoutInfo","_layout","setLayout","applyLayout","_getReuseType","getType","reuseType","getReusableView","_reusableViews","reusable","view","pop","viewType","_animatedContentOffset","_renderView","reusableView","_renderContent","cached","_renderedContent","get","renderView","set","visibleViews","from","_visibleViews","values","getView","getViewsOfType","filter","v","keyForView","keyAtPoint","layoutInfos","getVisibleLayoutInfos","willUnmount","_relayoutRaf","context","_scrollAnimation","_invalidationContext","Object","assign","scrollAnchor","_getScrollAnchor","beforeLayout","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","done","_disableTransitions","afterAnimation","setTimeout","_correctItemOrder","_isScrolling","_transaction","_visibleLayoutInfos","_children","delete","beginAnimations","endAnimations","anchorScrollPosition","getScrollAnchor","corner","anchorScrollPositionAtTop","cornerAnchor","contentOffset","_context_transaction","finalAnchor","adjustment","_getLayoutInfoMap","map","visibleLayoutInfos","currentlyVisible","item","reuseView","_applyLayoutInfo","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","_transactionQueue","_processTransactionQueue","viewsByParentKey","_view_layoutInfo","_viewsByParentKey_get","_view_layoutInfo1","_view_layoutInfo2","_view_layoutInfo3","push","buildTree","parent","views","children","renderWrapper","childViews","setVisibleViews","updated","cur","updateItemSize","_sizeUpdateQueue","changed","startScrolling","endScrolling","scrollToItem","options","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","then","clear","action","_startTransaction","_nextTransaction","_endTransaction","next","shift","_performTransaction","_getContentRect","_setupTransactionAnimations","WeakMap","_options_transitionDuration","$fc0b13b484ac1194$export$1505db82fe357e65","opts","$8D3nr$useState","isAnimating","setAnimating","isScrolling","setScrolling","$8D3nr$useMemo","onVisibleRectChange","$8D3nr$useLayoutEffect","$8D3nr$useEffect","$8D3nr$useCallback","state"],"sources":["D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\index.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Layout.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\LayoutInfo.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Point.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Rect.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Size.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\ReusableView.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\useVirtualizerState.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Virtualizer.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\tween.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\utils.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\OverscanManager.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-stately\\virtualizer\\dist\\packages\\@react-stately\\virtualizer\\src\\Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from '@react-types/shared';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n\n  /**\n   * The total area of the Size.\n   */\n  get area() {\n    return this.width * this.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Key} from '@react-types/shared';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection, Key} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      // We are already in a layout effect when this method is called, so relayoutNow is appropriate.\n      this.relayoutNow({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this._transactionQueue.length > 0) {\n      this._processTransactionQueue();\n    } else if (this._invalidationContext) {\n      this.relayoutNow();\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent hierarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this hierarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}