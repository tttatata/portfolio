{"ast":null,"code":"import { isObject } from \"./chunk-MCFSCOSB.mjs\";\n\n// src/object.ts\nvar renameProp = (oldProp, newProp, _ref) => {\n  let {\n    [oldProp]: old,\n    ...others\n  } = _ref;\n  return {\n    [newProp]: old,\n    ...others\n  };\n};\nvar copyObject = obj => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  return {\n    ...obj\n  };\n};\nvar omitObject = (obj, omitKeys) => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  omitKeys.forEach(key => newObj[key] && delete newObj[key]);\n  return newObj;\n};\nvar cleanObject = obj => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  Object.keys(newObj).forEach(key => {\n    if (newObj[key] === void 0 || newObj[key] === null) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar cleanObjectKeys = function (obj) {\n  let keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  const newObj = {\n    ...obj\n  };\n  keys.forEach(key => {\n    if (newObj[key]) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar getKeyValue = (obj, key) => {\n  if (!isObject(obj)) return obj;\n  if (obj instanceof Array) return [...obj];\n  return obj[key];\n};\nvar getProp = (obj, path, fallback, index) => {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path];\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj) break;\n    obj = obj[key[index]];\n  }\n  return obj === void 0 ? fallback : obj;\n};\nvar arrayToObject = arr => {\n  if (!arr.length || !Array.isArray(arr)) return {};\n  return arr.reduce((acc, item) => {\n    return {\n      ...acc,\n      ...item\n    };\n  }, {});\n};\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\nexport { renameProp, copyObject, omitObject, cleanObject, cleanObjectKeys, getKeyValue, getProp, arrayToObject, compact };","map":{"version":3,"names":["isObject","renameProp","oldProp","newProp","_ref","old","others","copyObject","obj","Array","omitObject","omitKeys","newObj","forEach","key","cleanObject","Object","keys","cleanObjectKeys","arguments","length","undefined","getKeyValue","getProp","path","fallback","index","split","arrayToObject","arr","isArray","reduce","acc","item","compact","object","clone","assign"],"sources":["D:/TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17/frontend/node_modules/@nextui-org/shared-utils/dist/chunk-KARN4QIT.mjs"],"sourcesContent":["import {\n  isObject\n} from \"./chunk-MCFSCOSB.mjs\";\n\n// src/object.ts\nvar renameProp = (oldProp, newProp, { [oldProp]: old, ...others }) => ({\n  [newProp]: old,\n  ...others\n});\nvar copyObject = (obj) => {\n  if (!isObject(obj))\n    return obj;\n  if (obj instanceof Array)\n    return [...obj];\n  return { ...obj };\n};\nvar omitObject = (obj, omitKeys) => {\n  if (!isObject(obj))\n    return obj;\n  if (obj instanceof Array)\n    return [...obj];\n  const newObj = { ...obj };\n  omitKeys.forEach((key) => newObj[key] && delete newObj[key]);\n  return newObj;\n};\nvar cleanObject = (obj) => {\n  if (!isObject(obj))\n    return obj;\n  if (obj instanceof Array)\n    return [...obj];\n  const newObj = { ...obj };\n  Object.keys(newObj).forEach((key) => {\n    if (newObj[key] === void 0 || newObj[key] === null) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar cleanObjectKeys = (obj, keys = []) => {\n  if (!isObject(obj))\n    return obj;\n  if (obj instanceof Array)\n    return [...obj];\n  const newObj = { ...obj };\n  keys.forEach((key) => {\n    if (newObj[key]) {\n      delete newObj[key];\n    }\n  });\n  return newObj;\n};\nvar getKeyValue = (obj, key) => {\n  if (!isObject(obj))\n    return obj;\n  if (obj instanceof Array)\n    return [...obj];\n  return obj[key];\n};\nvar getProp = (obj, path, fallback, index) => {\n  const key = typeof path === \"string\" ? path.split(\".\") : [path];\n  for (index = 0; index < key.length; index += 1) {\n    if (!obj)\n      break;\n    obj = obj[key[index]];\n  }\n  return obj === void 0 ? fallback : obj;\n};\nvar arrayToObject = (arr) => {\n  if (!arr.length || !Array.isArray(arr))\n    return {};\n  return arr.reduce((acc, item) => {\n    return { ...acc, ...item };\n  }, {});\n};\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  renameProp,\n  copyObject,\n  omitObject,\n  cleanObject,\n  cleanObjectKeys,\n  getKeyValue,\n  getProp,\n  arrayToObject,\n  compact\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}