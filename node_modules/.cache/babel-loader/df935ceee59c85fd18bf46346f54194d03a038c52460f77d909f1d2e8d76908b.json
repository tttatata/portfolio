{"ast":null,"code":"// src/index.ts\nimport { useState } from \"react\";\nfunction useClipboard() {\n  let {\n    timeout = 2e3\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n  const onClearTimeout = () => {\n    if (copyTimeout) {\n      clearTimeout(copyTimeout);\n    }\n  };\n  const handleCopyResult = value => {\n    onClearTimeout();\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n  const copy = valueToCopy => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch(err => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    onClearTimeout();\n  };\n  return {\n    copy,\n    reset,\n    error,\n    copied\n  };\n}\nexport { useClipboard };","map":{"version":3,"names":["useState","useClipboard","timeout","arguments","length","undefined","error","setError","copied","setCopied","copyTimeout","setCopyTimeout","onClearTimeout","clearTimeout","handleCopyResult","value","setTimeout","copy","valueToCopy","navigator","clipboard","writeText","then","catch","err","Error","reset"],"sources":["D:/TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17/frontend/node_modules/@nextui-org/use-clipboard/dist/index.mjs"],"sourcesContent":["// src/index.ts\nimport { useState } from \"react\";\nfunction useClipboard({ timeout = 2e3 } = {}) {\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n  const onClearTimeout = () => {\n    if (copyTimeout) {\n      clearTimeout(copyTimeout);\n    }\n  };\n  const handleCopyResult = (value) => {\n    onClearTimeout();\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n  const copy = (valueToCopy) => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch((err) => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    onClearTimeout();\n  };\n  return { copy, reset, error, copied };\n}\nexport {\n  useClipboard\n};\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,YAAYA,CAAA,EAAyB;EAAA,IAAxB;IAAEC,OAAO,GAAG;EAAI,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC1C,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMY,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIF,WAAW,EAAE;MACfG,YAAY,CAACH,WAAW,CAAC;IAC3B;EACF,CAAC;EACD,MAAMI,gBAAgB,GAAIC,KAAK,IAAK;IAClCH,cAAc,EAAE;IAChBD,cAAc,CAACK,UAAU,CAAC,MAAMP,SAAS,CAAC,KAAK,CAAC,EAAEP,OAAO,CAAC,CAAC;IAC3DO,SAAS,CAACM,KAAK,CAAC;EAClB,CAAC;EACD,MAAME,IAAI,GAAIC,WAAW,IAAK;IAC5B,IAAI,WAAW,IAAIC,SAAS,EAAE;MAC5BA,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,WAAW,CAAC,CAACI,IAAI,CAAC,MAAMR,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAACS,KAAK,CAAEC,GAAG,IAAKjB,QAAQ,CAACiB,GAAG,CAAC,CAAC;IAC7G,CAAC,MAAM;MACLjB,QAAQ,CAAC,IAAIkB,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC3E;EACF,CAAC;EACD,MAAMC,KAAK,GAAGA,CAAA,KAAM;IAClBjB,SAAS,CAAC,KAAK,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;IACdK,cAAc,EAAE;EAClB,CAAC;EACD,OAAO;IAAEK,IAAI;IAAES,KAAK;IAAEpB,KAAK;IAAEE;EAAO,CAAC;AACvC;AACA,SACEP,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}