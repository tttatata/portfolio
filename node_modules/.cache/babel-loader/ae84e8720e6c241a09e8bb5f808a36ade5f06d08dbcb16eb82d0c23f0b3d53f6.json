{"ast":null,"code":"import $c0398ad35c3639b7$exports from \"./ar-AE.mjs\";\nimport $7af657c4165927c3$exports from \"./bg-BG.mjs\";\nimport $d95d4da6d531ab81$exports from \"./cs-CZ.mjs\";\nimport $24ebda9c775dca17$exports from \"./da-DK.mjs\";\nimport $743e0dfca6cab1e9$exports from \"./de-DE.mjs\";\nimport $a2f41026e05f1c84$exports from \"./el-GR.mjs\";\nimport $43b800e97c901737$exports from \"./en-US.mjs\";\nimport $442f5f6ac211e29f$exports from \"./es-ES.mjs\";\nimport $dff280acfeb2d8ac$exports from \"./et-EE.mjs\";\nimport $51608325613944d7$exports from \"./fi-FI.mjs\";\nimport $c4a1b1eabeaa87be$exports from \"./fr-FR.mjs\";\nimport $8c74815cdee18d1b$exports from \"./he-IL.mjs\";\nimport $fd0e9ef6a7fe0ec9$exports from \"./hr-HR.mjs\";\nimport $a89a74a39eba465a$exports from \"./hu-HU.mjs\";\nimport $edc7c66594a0ae8a$exports from \"./it-IT.mjs\";\nimport $f1ab51510712db52$exports from \"./ja-JP.mjs\";\nimport $f9b672d9b82fa3d6$exports from \"./ko-KR.mjs\";\nimport $a385f3910feda499$exports from \"./lt-LT.mjs\";\nimport $4f1bde932c441789$exports from \"./lv-LV.mjs\";\nimport $914a51a8a594d5be$exports from \"./nb-NO.mjs\";\nimport $89aaf803103bb500$exports from \"./nl-NL.mjs\";\nimport $c685891476dbaaca$exports from \"./pl-PL.mjs\";\nimport $885879b9b10c2959$exports from \"./pt-BR.mjs\";\nimport $6b39616688a51692$exports from \"./pt-PT.mjs\";\nimport $f26362aed63f47e2$exports from \"./ro-RO.mjs\";\nimport $06cbade644558bf0$exports from \"./ru-RU.mjs\";\nimport $0a391ff68f9d59b1$exports from \"./sk-SK.mjs\";\nimport $8193cf0e649c7928$exports from \"./sl-SI.mjs\";\nimport $f398debcce5a5c55$exports from \"./sr-SP.mjs\";\nimport $9e9fef000aa4c013$exports from \"./sv-SE.mjs\";\nimport $c016c8183bbe3d68$exports from \"./tr-TR.mjs\";\nimport $ca4f6c8462244e62$exports from \"./uk-UA.mjs\";\nimport $2d9960c02ccac927$exports from \"./zh-CN.mjs\";\nimport $f1b682a4c8c5631c$exports from \"./zh-TW.mjs\";\nimport { useId as $1Hnir$useId, filterDOMProps as $1Hnir$filterDOMProps, mergeProps as $1Hnir$mergeProps, useRouter as $1Hnir$useRouter, useSlotId as $1Hnir$useSlotId, useEffectEvent as $1Hnir$useEffectEvent, useLayoutEffect as $1Hnir$useLayoutEffect, useResizeObserver as $1Hnir$useResizeObserver } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $1Hnir$useLocalizedStringFormatter, useLocale as $1Hnir$useLocale } from \"@react-aria/i18n\";\nimport { useLongPress as $1Hnir$useLongPress, usePress as $1Hnir$usePress, useHover as $1Hnir$useHover, isFocusVisible as $1Hnir$isFocusVisible, useKeyboard as $1Hnir$useKeyboard, useFocus as $1Hnir$useFocus, useInteractionModality as $1Hnir$useInteractionModality } from \"@react-aria/interactions\";\nimport { useOverlayTrigger as $1Hnir$useOverlayTrigger } from \"@react-aria/overlays\";\nimport { useSelectableList as $1Hnir$useSelectableList, useSelectableItem as $1Hnir$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $1Hnir$getItemCount } from \"@react-stately/collections\";\nimport { useRef as $1Hnir$useRef, useCallback as $1Hnir$useCallback, useState as $1Hnir$useState, useEffect as $1Hnir$useEffect } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $2cbb7ca666678a14$exports = {};\n$2cbb7ca666678a14$exports = {\n  \"ar-AE\": $c0398ad35c3639b7$exports,\n  \"bg-BG\": $7af657c4165927c3$exports,\n  \"cs-CZ\": $d95d4da6d531ab81$exports,\n  \"da-DK\": $24ebda9c775dca17$exports,\n  \"de-DE\": $743e0dfca6cab1e9$exports,\n  \"el-GR\": $a2f41026e05f1c84$exports,\n  \"en-US\": $43b800e97c901737$exports,\n  \"es-ES\": $442f5f6ac211e29f$exports,\n  \"et-EE\": $dff280acfeb2d8ac$exports,\n  \"fi-FI\": $51608325613944d7$exports,\n  \"fr-FR\": $c4a1b1eabeaa87be$exports,\n  \"he-IL\": $8c74815cdee18d1b$exports,\n  \"hr-HR\": $fd0e9ef6a7fe0ec9$exports,\n  \"hu-HU\": $a89a74a39eba465a$exports,\n  \"it-IT\": $edc7c66594a0ae8a$exports,\n  \"ja-JP\": $f1ab51510712db52$exports,\n  \"ko-KR\": $f9b672d9b82fa3d6$exports,\n  \"lt-LT\": $a385f3910feda499$exports,\n  \"lv-LV\": $4f1bde932c441789$exports,\n  \"nb-NO\": $914a51a8a594d5be$exports,\n  \"nl-NL\": $89aaf803103bb500$exports,\n  \"pl-PL\": $c685891476dbaaca$exports,\n  \"pt-BR\": $885879b9b10c2959$exports,\n  \"pt-PT\": $6b39616688a51692$exports,\n  \"ro-RO\": $f26362aed63f47e2$exports,\n  \"ru-RU\": $06cbade644558bf0$exports,\n  \"sk-SK\": $0a391ff68f9d59b1$exports,\n  \"sl-SI\": $8193cf0e649c7928$exports,\n  \"sr-SP\": $f398debcce5a5c55$exports,\n  \"sv-SE\": $9e9fef000aa4c013$exports,\n  \"tr-TR\": $c016c8183bbe3d68$exports,\n  \"uk-UA\": $ca4f6c8462244e62$exports,\n  \"zh-CN\": $2d9960c02ccac927$exports,\n  \"zh-TW\": $f1b682a4c8c5631c$exports\n};\nfunction $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {\n  let {\n    type = \"menu\",\n    isDisabled: isDisabled,\n    trigger = \"press\"\n  } = props;\n  let menuTriggerId = (0, $1Hnir$useId)();\n  let {\n    triggerProps: triggerProps,\n    overlayProps: overlayProps\n  } = (0, $1Hnir$useOverlayTrigger)({\n    type: type\n  }, state, ref);\n  let onKeyDown = e => {\n    if (isDisabled) return;\n    if (trigger === \"longPress\" && !e.altKey) return;\n    if (ref && ref.current) switch (e.key) {\n      case \"Enter\":\n      case \" \":\n        if (trigger === \"longPress\") return;\n      // fallthrough\n      case \"ArrowDown\":\n        // Stop propagation, unless it would already be handled by useKeyboard.\n        if (!(\"continuePropagation\" in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle(\"first\");\n        break;\n      case \"ArrowUp\":\n        if (!(\"continuePropagation\" in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle(\"last\");\n        break;\n      default:\n        // Allow other keys.\n        if (\"continuePropagation\" in e) e.continuePropagation();\n    }\n  };\n  let stringFormatter = (0, $1Hnir$useLocalizedStringFormatter)((0, /*@__PURE__*/$parcel$interopDefault($2cbb7ca666678a14$exports)), \"@react-aria/menu\");\n  let {\n    longPressProps: longPressProps\n  } = (0, $1Hnir$useLongPress)({\n    isDisabled: isDisabled || trigger !== \"longPress\",\n    accessibilityDescription: stringFormatter.format(\"longPressMessage\"),\n    onLongPressStart() {\n      state.close();\n    },\n    onLongPress() {\n      state.open(\"first\");\n    }\n  });\n  let pressProps = {\n    onPressStart(e) {\n      // For consistency with native, open the menu on mouse/key down, but touch up.\n      if (e.pointerType !== \"touch\" && e.pointerType !== \"keyboard\" && !isDisabled)\n        // If opened with a screen reader, auto focus the first item.\n        // Otherwise, the menu itself will be focused.\n        state.toggle(e.pointerType === \"virtual\" ? \"first\" : null);\n    },\n    onPress(e) {\n      if (e.pointerType === \"touch\" && !isDisabled) state.toggle();\n    }\n  };\n  // omit onPress from triggerProps since we override it above.\n  delete triggerProps.onPress;\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      ...(trigger === \"press\" ? pressProps : longPressProps),\n      id: menuTriggerId,\n      onKeyDown: onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      \"aria-labelledby\": menuTriggerId,\n      autoFocus: state.focusStrategy || true,\n      onClose: state.close\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();\nfunction $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    ...otherProps\n  } = props;\n  if (!props[\"aria-label\"] && !props[\"aria-labelledby\"]) console.warn(\"An aria-label or aria-labelledby prop is required for accessibility.\");\n  let domProps = (0, $1Hnir$filterDOMProps)(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = (0, $1Hnir$useSelectableList)({\n    ...otherProps,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap: shouldFocusWrap,\n    linkBehavior: \"override\"\n  });\n  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n  return {\n    menuProps: (0, $1Hnir$mergeProps)(domProps, {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, {\n      role: \"menu\",\n      ...listProps,\n      onKeyDown: e => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== \"Escape\") listProps.onKeyDown(e);\n      }\n    })\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {\n  var _item_props;\n  let {\n    key: key,\n    closeOnSelect: closeOnSelect,\n    isVirtualized: isVirtualized,\n    \"aria-haspopup\": hasPopup,\n    onPressStart: pressStartProp,\n    onPressUp: pressUpProp,\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressEnd: onPressEnd,\n    onHoverStart: hoverStartProp,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onFocus: onFocus,\n    onFocusChange: onFocusChange,\n    onBlur: onBlur\n  } = props;\n  let isTrigger = !!hasPopup;\n  var _props_isDisabled;\n  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);\n  var _props_isSelected;\n  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);\n  let data = (0, $d5336fe17ce95402$export$6f49b4016bfc8d56).get(state);\n  let onClose = props.onClose || data.onClose;\n  let onAction = isTrigger ? () => {} : props.onAction || data.onAction;\n  let router = (0, $1Hnir$useRouter)();\n  let performAction = e => {\n    if (onAction) onAction(key);\n    if (e.target instanceof HTMLAnchorElement) router.open(e.target, e);\n  };\n  let role = \"menuitem\";\n  if (!isTrigger) {\n    if (state.selectionManager.selectionMode === \"single\") role = \"menuitemradio\";else if (state.selectionManager.selectionMode === \"multiple\") role = \"menuitemcheckbox\";\n  }\n  let labelId = (0, $1Hnir$useSlotId)();\n  let descriptionId = (0, $1Hnir$useSlotId)();\n  let keyboardId = (0, $1Hnir$useSlotId)();\n  let ariaProps = {\n    \"aria-disabled\": isDisabled || undefined,\n    role: role,\n    \"aria-label\": props[\"aria-label\"],\n    \"aria-labelledby\": labelId,\n    \"aria-describedby\": [descriptionId, keyboardId].filter(Boolean).join(\" \") || undefined,\n    \"aria-controls\": props[\"aria-controls\"],\n    \"aria-haspopup\": hasPopup,\n    \"aria-expanded\": props[\"aria-expanded\"]\n  };\n  if (state.selectionManager.selectionMode !== \"none\" && !isTrigger) ariaProps[\"aria-checked\"] = isSelected;\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    ariaProps[\"aria-posinset\"] = item === null || item === void 0 ? void 0 : item.index;\n    ariaProps[\"aria-setsize\"] = (0, $1Hnir$getItemCount)(state.collection);\n  }\n  let onPressStart = e => {\n    if (e.pointerType === \"keyboard\") performAction(e);\n    pressStartProp === null || pressStartProp === void 0 ? void 0 : pressStartProp(e);\n  };\n  let onPressUp = e => {\n    if (e.pointerType !== \"keyboard\") {\n      performAction(e);\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (!isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== \"multiple\" || state.selectionManager.isLink(key))) onClose();\n    }\n    pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);\n  };\n  let {\n    itemProps: itemProps,\n    isFocused: isFocused\n  } = (0, $1Hnir$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true,\n    // Disable all handling of links in useSelectable item\n    // because we handle it ourselves. The behavior of menus\n    // is slightly different from other collections because\n    // actions are performed on key down rather than key up.\n    linkBehavior: \"none\"\n  });\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $1Hnir$usePress)({\n    onPressStart: onPressStart,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    onPressChange: onPressChange,\n    onPressEnd: onPressEnd,\n    isDisabled: isDisabled\n  });\n  let {\n    hoverProps: hoverProps\n  } = (0, $1Hnir$useHover)({\n    isDisabled: isDisabled,\n    onHoverStart(e) {\n      if (!(0, $1Hnir$isFocusVisible)()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n      hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);\n    },\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd\n  });\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $1Hnir$useKeyboard)({\n    onKeyDown: e => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n      switch (e.key) {\n        case \" \":\n          if (!isDisabled && state.selectionManager.selectionMode === \"none\" && !isTrigger && closeOnSelect !== false && onClose) onClose();\n          break;\n        case \"Enter\":\n          // The Enter key should always close on select, except if overridden.\n          if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) onClose();\n          break;\n        default:\n          if (!isTrigger) e.continuePropagation();\n          onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);\n          break;\n      }\n    },\n    onKeyUp: onKeyUp\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $1Hnir$useFocus)({\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onFocusChange: onFocusChange\n  });\n  let domProps = (0, $1Hnir$filterDOMProps)(item.props, {\n    isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)\n  });\n  delete domProps.id;\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...(0, $1Hnir$mergeProps)(domProps, isTrigger ? {\n        onFocus: itemProps.onFocus\n      } : itemProps, pressProps, hoverProps, keyboardProps, focusProps),\n      tabIndex: itemProps.tabIndex != null ? -1 : undefined\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $3e5eb2498db5b506$export$73f7a44322579622(props) {\n  let {\n    heading: heading,\n    \"aria-label\": ariaLabel\n  } = props;\n  let headingId = (0, $1Hnir$useId)();\n  return {\n    itemProps: {\n      role: \"presentation\"\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, using role=\"presentation\",\n      // and only use it as a label for the nested group.\n      id: headingId,\n      role: \"presentation\"\n    } : {},\n    groupProps: {\n      role: \"group\",\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": heading ? headingId : undefined\n    }\n  };\n}\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS = 2;\nconst $d275435c250248f8$var$THROTTLE_TIME = 50;\nconst $d275435c250248f8$var$TIMEOUT_TIME = 1000;\nconst $d275435c250248f8$var$ANGLE_PADDING = Math.PI / 12; // 15°\nfunction $d275435c250248f8$export$85ec83e04c95f50a(options) {\n  let {\n    menuRef: menuRef,\n    submenuRef: submenuRef,\n    isOpen: isOpen,\n    isDisabled: isDisabled\n  } = options;\n  let prevPointerPos = (0, $1Hnir$useRef)();\n  let submenuRect = (0, $1Hnir$useRef)();\n  let lastProcessedTime = (0, $1Hnir$useRef)(0);\n  let timeout = (0, $1Hnir$useRef)();\n  let autoCloseTimeout = (0, $1Hnir$useRef)();\n  let submenuSide = (0, $1Hnir$useRef)();\n  let movementsTowardsSubmenuCount = (0, $1Hnir$useRef)(2);\n  let [preventPointerEvents, setPreventPointerEvents] = (0, $1Hnir$useState)(false);\n  let updateSubmenuRect = () => {\n    if (submenuRef.current) {\n      submenuRect.current = submenuRef.current.getBoundingClientRect();\n      submenuSide.current = undefined;\n    }\n  };\n  (0, $1Hnir$useResizeObserver)({\n    ref: submenuRef,\n    onResize: updateSubmenuRect\n  });\n  let reset = () => {\n    setPreventPointerEvents(false);\n    movementsTowardsSubmenuCount.current = $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS;\n  };\n  let modality = (0, $1Hnir$useInteractionModality)();\n  (0, $1Hnir$useEffect)(() => {\n    if (preventPointerEvents && menuRef.current) menuRef.current.style.pointerEvents = \"none\";else menuRef.current.style.pointerEvents = \"\";\n  }, [menuRef, preventPointerEvents]);\n  (0, $1Hnir$useEffect)(() => {\n    let submenu = submenuRef.current;\n    let menu = menuRef.current;\n    if (isDisabled || !submenu || !isOpen || modality !== \"pointer\") {\n      reset();\n      return;\n    }\n    submenuRect.current = submenu.getBoundingClientRect();\n    let onPointerMove = e => {\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\") return;\n      let currentTime = Date.now();\n      // Throttle\n      if (currentTime - lastProcessedTime.current < $d275435c250248f8$var$THROTTLE_TIME) return;\n      clearTimeout(timeout.current);\n      clearTimeout(autoCloseTimeout.current);\n      let {\n        clientX: mouseX,\n        clientY: mouseY\n      } = e;\n      if (!prevPointerPos.current) {\n        prevPointerPos.current = {\n          x: mouseX,\n          y: mouseY\n        };\n        return;\n      }\n      if (!submenuRect.current) return;\n      if (!submenuSide.current) submenuSide.current = mouseX > submenuRect.current.right ? \"left\" : \"right\";\n      // Pointer is outside of parent menu\n      if (mouseX < menu.getBoundingClientRect().left || mouseX > menu.getBoundingClientRect().right || mouseY < menu.getBoundingClientRect().top || mouseY > menu.getBoundingClientRect().bottom) {\n        reset();\n        return;\n      }\n      /* Check if pointer is moving towards submenu.\n      Uses the 2-argument arctangent (https://en.wikipedia.org/wiki/Atan2) to calculate:\n      - angle between previous pointer and top of submenu\n      - angle between previous pointer and bottom of submenu\n      - angle between previous pointer and current pointer (delta)\n      If the pointer delta angle value is between the top and bottom angle values, we know the pointer is moving towards the submenu.\n      */\n      let prevMouseX = prevPointerPos.current.x;\n      let prevMouseY = prevPointerPos.current.y;\n      let toSubmenuX = submenuSide.current === \"right\" ? submenuRect.current.left - prevMouseX : prevMouseX - submenuRect.current.right;\n      let angleTop = Math.atan2(prevMouseY - submenuRect.current.top, toSubmenuX) + $d275435c250248f8$var$ANGLE_PADDING;\n      let angleBottom = Math.atan2(prevMouseY - submenuRect.current.bottom, toSubmenuX) - $d275435c250248f8$var$ANGLE_PADDING;\n      let anglePointer = Math.atan2(prevMouseY - mouseY, submenuSide.current === \"left\" ? -(mouseX - prevMouseX) : mouseX - prevMouseX);\n      let isMovingTowardsSubmenu = anglePointer < angleTop && anglePointer > angleBottom;\n      movementsTowardsSubmenuCount.current = isMovingTowardsSubmenu ? Math.min(movementsTowardsSubmenuCount.current + 1, $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS) : Math.max(movementsTowardsSubmenuCount.current - 1, 0);\n      if (movementsTowardsSubmenuCount.current >= $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS) setPreventPointerEvents(true);else setPreventPointerEvents(false);\n      lastProcessedTime.current = currentTime;\n      prevPointerPos.current = {\n        x: mouseX,\n        y: mouseY\n      };\n      // If the pointer is moving towards the submenu, start a timeout to close if no other movements are made after 500ms.\n      if (isMovingTowardsSubmenu) timeout.current = setTimeout(() => {\n        reset();\n        autoCloseTimeout.current = setTimeout(() => {\n          // Fire a pointerover event to trigger the menu to close.\n          // Wait until pointer-events:none is no longer applied\n          let target = document.elementFromPoint(mouseX, mouseY);\n          if (target && menu.contains(target)) target.dispatchEvent(new PointerEvent(\"pointerover\", {\n            bubbles: true,\n            cancelable: true\n          }));\n        }, 100);\n      }, $d275435c250248f8$var$TIMEOUT_TIME);\n    };\n    window.addEventListener(\"pointermove\", onPointerMove);\n    return () => {\n      window.removeEventListener(\"pointermove\", onPointerMove);\n      clearTimeout(timeout.current);\n      clearTimeout(autoCloseTimeout.current);\n      movementsTowardsSubmenuCount.current = $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS;\n    };\n  }, [isDisabled, isOpen, menuRef, modality, setPreventPointerEvents, submenuRef]);\n}\nfunction $0065b146e7192841$export$3819f8ee9f4ce664(props, state, ref) {\n  let {\n    parentMenuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    type = \"menu\",\n    isDisabled: isDisabled,\n    node: node,\n    delay = 200\n  } = props;\n  let submenuTriggerId = (0, $1Hnir$useId)();\n  let overlayId = (0, $1Hnir$useId)();\n  let {\n    direction: direction\n  } = (0, $1Hnir$useLocale)();\n  let openTimeout = (0, $1Hnir$useRef)();\n  let cancelOpenTimeout = (0, $1Hnir$useCallback)(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n  let onSubmenuOpen = (0, $1Hnir$useEffectEvent)(focusStrategy => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n  let onSubmenuClose = (0, $1Hnir$useEffectEvent)(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n  (0, $1Hnir$useLayoutEffect)(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n  let submenuKeyDown = e => {\n    switch (e.key) {\n      case \"ArrowLeft\":\n        if (direction === \"ltr\" && e.currentTarget.contains(e.target)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case \"ArrowRight\":\n        if (direction === \"rtl\" && e.currentTarget.contains(e.target)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case \"Escape\":\n        e.stopPropagation();\n        state.closeAll();\n        break;\n    }\n  };\n  let submenuProps = {\n    id: overlayId,\n    \"aria-label\": node.textValue,\n    submenuLevel: state.submenuLevel,\n    ...(type === \"menu\" && {\n      onClose: state.closeAll,\n      autoFocus: state.focusStrategy,\n      onKeyDown: submenuKeyDown\n    })\n  };\n  let submenuTriggerKeyDown = e => {\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (!isDisabled) {\n          if (direction === \"ltr\") {\n            if (!state.isOpen) onSubmenuOpen(\"first\");\n            if (type === \"menu\" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      case \"ArrowLeft\":\n        if (!isDisabled) {\n          if (direction === \"rtl\") {\n            if (!state.isOpen) onSubmenuOpen(\"first\");\n            if (type === \"menu\" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      case \"Escape\":\n        state.closeAll();\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n  let onPressStart = e => {\n    if (!isDisabled && (e.pointerType === \"virtual\" || e.pointerType === \"keyboard\"))\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen(\"first\");\n  };\n  let onPress = e => {\n    if (!isDisabled && (e.pointerType === \"touch\" || e.pointerType === \"mouse\"))\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n  };\n  let onHoverChange = isHovered => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) openTimeout.current = setTimeout(() => {\n          onSubmenuOpen();\n        }, delay);\n      } else if (!isHovered) cancelOpenTimeout();\n    }\n  };\n  let onBlur = e => {\n    if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget)) onSubmenuClose();\n  };\n  let shouldCloseOnInteractOutside = target => {\n    if (target !== ref.current) return true;\n    return false;\n  };\n  (0, $d275435c250248f8$export$85ec83e04c95f50a)({\n    menuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    isOpen: state.isOpen,\n    isDisabled: isDisabled\n  });\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      \"aria-controls\": state.isOpen ? overlayId : undefined,\n      \"aria-haspopup\": !isDisabled ? type : undefined,\n      \"aria-expanded\": state.isOpen ? \"true\" : \"false\",\n      onPressStart: onPressStart,\n      onPress: onPress,\n      onHoverChange: onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur: onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps: submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      disableFocusManagement: true,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside\n    }\n  };\n}\nexport { $168583247155ddda$export$dc9c12ed27dd1b49 as useMenuTrigger, $d5336fe17ce95402$export$38eaa17faae8f579 as useMenu, $a2e5df62f93c7633$export$9d32628fc2aea7da as useMenuItem, $3e5eb2498db5b506$export$73f7a44322579622 as useMenuSection, $0065b146e7192841$export$3819f8ee9f4ce664 as UNSTABLE_useSubmenuTrigger };","map":{"version":3,"names":["$2cbb7ca666678a14$exports","$c0398ad35c3639b7$exports","$7af657c4165927c3$exports","$d95d4da6d531ab81$exports","$24ebda9c775dca17$exports","$743e0dfca6cab1e9$exports","$a2f41026e05f1c84$exports","$43b800e97c901737$exports","$442f5f6ac211e29f$exports","$dff280acfeb2d8ac$exports","$51608325613944d7$exports","$c4a1b1eabeaa87be$exports","$8c74815cdee18d1b$exports","$fd0e9ef6a7fe0ec9$exports","$a89a74a39eba465a$exports","$edc7c66594a0ae8a$exports","$f1ab51510712db52$exports","$f9b672d9b82fa3d6$exports","$a385f3910feda499$exports","$4f1bde932c441789$exports","$914a51a8a594d5be$exports","$89aaf803103bb500$exports","$c685891476dbaaca$exports","$885879b9b10c2959$exports","$6b39616688a51692$exports","$f26362aed63f47e2$exports","$06cbade644558bf0$exports","$0a391ff68f9d59b1$exports","$8193cf0e649c7928$exports","$f398debcce5a5c55$exports","$9e9fef000aa4c013$exports","$c016c8183bbe3d68$exports","$ca4f6c8462244e62$exports","$2d9960c02ccac927$exports","$f1b682a4c8c5631c$exports","$168583247155ddda$export$dc9c12ed27dd1b49","props","state","ref","type","isDisabled","trigger","menuTriggerId","$1Hnir$useId","triggerProps","overlayProps","$1Hnir$useOverlayTrigger","onKeyDown","e","altKey","current","key","stopPropagation","preventDefault","toggle","continuePropagation","stringFormatter","$1Hnir$useLocalizedStringFormatter","$parcel$interopDefault","longPressProps","$1Hnir$useLongPress","accessibilityDescription","format","onLongPressStart","close","onLongPress","open","pressProps","onPressStart","pointerType","onPress","menuTriggerProps","id","menuProps","autoFocus","focusStrategy","onClose","$d5336fe17ce95402$export$6f49b4016bfc8d56","WeakMap","$d5336fe17ce95402$export$38eaa17faae8f579","shouldFocusWrap","onKeyUp","otherProps","console","warn","domProps","$1Hnir$filterDOMProps","labelable","listProps","$1Hnir$useSelectableList","selectionManager","collection","disabledKeys","linkBehavior","set","onAction","$1Hnir$mergeProps","role","$a2e5df62f93c7633$export$9d32628fc2aea7da","_item_props","closeOnSelect","isVirtualized","hasPopup","pressStartProp","onPressUp","pressUpProp","onPressChange","onPressEnd","onHoverStart","hoverStartProp","onHoverChange","onHoverEnd","onFocus","onFocusChange","onBlur","isTrigger","_props_isDisabled","has","_props_isSelected","isSelected","data","get","router","$1Hnir$useRouter","performAction","target","HTMLAnchorElement","selectionMode","labelId","$1Hnir$useSlotId","descriptionId","keyboardId","ariaProps","undefined","filter","Boolean","join","item","getItem","index","$1Hnir$getItemCount","isLink","itemProps","isFocused","$1Hnir$useSelectableItem","shouldSelectOnPressUp","allowsDifferentPressOrigin","isPressed","$1Hnir$usePress","hoverProps","$1Hnir$useHover","$1Hnir$isFocusVisible","setFocused","setFocusedKey","keyboardProps","$1Hnir$useKeyboard","repeat","focusProps","$1Hnir$useFocus","href","menuItemProps","tabIndex","labelProps","descriptionProps","keyboardShortcutProps","$3e5eb2498db5b506$export$73f7a44322579622","heading","ariaLabel","headingId","headingProps","groupProps","$d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS","$d275435c250248f8$var$THROTTLE_TIME","$d275435c250248f8$var$TIMEOUT_TIME","$d275435c250248f8$var$ANGLE_PADDING","Math","PI","$d275435c250248f8$export$85ec83e04c95f50a","options","menuRef","submenuRef","isOpen","prevPointerPos","$1Hnir$useRef","submenuRect","lastProcessedTime","timeout","autoCloseTimeout","submenuSide","movementsTowardsSubmenuCount","preventPointerEvents","setPreventPointerEvents","$1Hnir$useState","updateSubmenuRect","getBoundingClientRect","$1Hnir$useResizeObserver","onResize","reset","modality","$1Hnir$useInteractionModality","$1Hnir$useEffect","style","pointerEvents","submenu","menu","onPointerMove","currentTime","Date","now","clearTimeout","clientX","mouseX","clientY","mouseY","x","y","right","left","top","bottom","prevMouseX","prevMouseY","toSubmenuX","angleTop","atan2","angleBottom","anglePointer","isMovingTowardsSubmenu","min","max","setTimeout","document","elementFromPoint","contains","dispatchEvent","PointerEvent","bubbles","cancelable","window","addEventListener","removeEventListener","$0065b146e7192841$export$3819f8ee9f4ce664","parentMenuRef","node","delay","submenuTriggerId","overlayId","direction","$1Hnir$useLocale","openTimeout","cancelOpenTimeout","$1Hnir$useCallback","onSubmenuOpen","$1Hnir$useEffectEvent","onSubmenuClose","$1Hnir$useLayoutEffect","submenuKeyDown","currentTarget","focus","closeAll","submenuProps","textValue","submenuLevel","submenuTriggerKeyDown","activeElement","isHovered","relatedTarget","shouldCloseOnInteractOutside","submenuTriggerProps","popoverProps","isNonModal","disableFocusManagement"],"sources":["D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\index.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuTrigger.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\*.js","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenu.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuItem.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenuSection.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useSubmenuTrigger.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useSafelyMouseToSubmenu.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useMenuTrigger} from './useMenuTrigger';\nexport {useMenu} from './useMenu';\nexport {useMenuItem} from './useMenuItem';\nexport {useMenuSection} from './useMenuSection';\nexport {UNSTABLE_useSubmenuTrigger} from './useSubmenuTrigger';\n\nexport type {AriaMenuProps} from '@react-types/menu';\nexport type {AriaMenuTriggerProps, MenuTriggerAria} from './useMenuTrigger';\nexport type {AriaMenuOptions, MenuAria} from './useMenu';\nexport type {AriaMenuItemProps, MenuItemAria} from './useMenuItem';\nexport type {AriaMenuSectionProps, MenuSectionAria} from './useMenuSection';\nexport type {AriaSubmenuTriggerProps, SubmenuTriggerAria} from './useSubmenuTrigger';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaMenuOptions} from './useMenu';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {MenuTriggerType} from '@react-types/menu';\nimport {RefObject} from 'react';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useLongPress} from '@react-aria/interactions';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\nexport interface AriaMenuTriggerProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean,\n  /** How menu is triggered. */\n  trigger?: MenuTriggerType\n}\n\nexport interface MenuTriggerAria<T> {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: AriaMenuOptions<T>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n * @param ref - Ref to the HTML element trigger for the menu.\n */\nexport function useMenuTrigger<T>(props: AriaMenuTriggerProps, state: MenuTriggerState, ref: RefObject<Element>): MenuTriggerAria<T> {\n  let {\n    type = 'menu' as AriaMenuTriggerProps['type'],\n    isDisabled,\n    trigger = 'press'\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if (isDisabled) {\n      return;\n    }\n\n    if (trigger === 'longPress' && !e.altKey) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'Enter':\n        case ' ':\n          if (trigger === 'longPress') {\n            return;\n          }\n          // fallthrough\n        case 'ArrowDown':\n          // Stop propagation, unless it would already be handled by useKeyboard.\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('last');\n          break;\n        default:\n          // Allow other keys.\n          if ('continuePropagation' in e) {\n            e.continuePropagation();\n          }\n      }\n    }\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/menu');\n  let {longPressProps} = useLongPress({\n    isDisabled: isDisabled || trigger !== 'longPress',\n    accessibilityDescription: stringFormatter.format('longPressMessage'),\n    onLongPressStart() {\n      state.close();\n    },\n    onLongPress() {\n      state.open('first');\n    }\n  });\n\n  let pressProps =  {\n    onPressStart(e) {\n      // For consistency with native, open the menu on mouse/key down, but touch up.\n      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) {\n        // If opened with a screen reader, auto focus the first item.\n        // Otherwise, the menu itself will be focused.\n        state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n      }\n    },\n    onPress(e) {\n      if (e.pointerType === 'touch' && !isDisabled) {\n        state.toggle();\n      }\n    }\n  };\n\n  // omit onPress from triggerProps since we override it above.\n  delete triggerProps.onPress;\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      ...(trigger === 'press' ? pressProps : longPressProps),\n      id: menuTriggerId,\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId,\n      autoFocus: state.focusStrategy || true,\n      onClose: state.close\n    }\n  };\n}\n","const _temp0 = require(\"../intl/ar-AE.json\");\nconst _temp1 = require(\"../intl/bg-BG.json\");\nconst _temp2 = require(\"../intl/cs-CZ.json\");\nconst _temp3 = require(\"../intl/da-DK.json\");\nconst _temp4 = require(\"../intl/de-DE.json\");\nconst _temp5 = require(\"../intl/el-GR.json\");\nconst _temp6 = require(\"../intl/en-US.json\");\nconst _temp7 = require(\"../intl/es-ES.json\");\nconst _temp8 = require(\"../intl/et-EE.json\");\nconst _temp9 = require(\"../intl/fi-FI.json\");\nconst _temp10 = require(\"../intl/fr-FR.json\");\nconst _temp11 = require(\"../intl/he-IL.json\");\nconst _temp12 = require(\"../intl/hr-HR.json\");\nconst _temp13 = require(\"../intl/hu-HU.json\");\nconst _temp14 = require(\"../intl/it-IT.json\");\nconst _temp15 = require(\"../intl/ja-JP.json\");\nconst _temp16 = require(\"../intl/ko-KR.json\");\nconst _temp17 = require(\"../intl/lt-LT.json\");\nconst _temp18 = require(\"../intl/lv-LV.json\");\nconst _temp19 = require(\"../intl/nb-NO.json\");\nconst _temp20 = require(\"../intl/nl-NL.json\");\nconst _temp21 = require(\"../intl/pl-PL.json\");\nconst _temp22 = require(\"../intl/pt-BR.json\");\nconst _temp23 = require(\"../intl/pt-PT.json\");\nconst _temp24 = require(\"../intl/ro-RO.json\");\nconst _temp25 = require(\"../intl/ru-RU.json\");\nconst _temp26 = require(\"../intl/sk-SK.json\");\nconst _temp27 = require(\"../intl/sl-SI.json\");\nconst _temp28 = require(\"../intl/sr-SP.json\");\nconst _temp29 = require(\"../intl/sv-SE.json\");\nconst _temp30 = require(\"../intl/tr-TR.json\");\nconst _temp31 = require(\"../intl/uk-UA.json\");\nconst _temp32 = require(\"../intl/zh-CN.json\");\nconst _temp33 = require(\"../intl/zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, Key, KeyboardDelegate, KeyboardEvents} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {RefObject} from 'react';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'>, KeyboardEvents {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface MenuData {\n  onClose?: () => void,\n  onAction?: (key: Key) => void\n}\n\nexport const menuData = new WeakMap<TreeState<unknown>, MenuData>();\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown,\n    onKeyUp,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {onKeyDown, onKeyUp}, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: (e) => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape') {\n          listProps.onKeyDown(e);\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, DOMProps, FocusableElement, FocusEvents, HoverEvents, Key, KeyboardEvents, PressEvent, PressEvents} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useRouter, useSlotId} from '@react-aria/utils';\nimport {getItemCount} from '@react-stately/collections';\nimport {isFocusVisible, useFocus, useHover, useKeyboard, usePress} from '@react-aria/interactions';\nimport {menuData} from './useMenu';\nimport {RefObject} from 'react';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: DOMAttributes,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: DOMAttributes,\n\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaMenuItemProps extends DOMProps, PressEvents, HoverEvents, KeyboardEvents, FocusEvents  {\n  /**\n   * Whether the menu item is disabled.\n   * @deprecated - pass disabledKeys to useTreeState instead.\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the menu item is selected.\n   * @deprecated - pass selectedKeys to useTreeState instead.\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key?: Key,\n\n  /**\n   * Handler that is called when the menu should close after selecting an item.\n   * @deprecated - pass to the menu instead.\n   */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /**\n   * Handler that is called when the user activates the item.\n   * @deprecated - pass to the menu instead.\n   */\n  onAction?: (key: Key) => void,\n\n  /** What kind of popup the item opens. */\n  'aria-haspopup'?: 'menu' | 'dialog',\n\n  /** Indicates whether the menu item's popup element is expanded or collapsed. */\n  'aria-expanded'?: boolean | 'true' | 'false',\n\n  /** Identifies the menu item's popup element whose contents or presence is controlled by the menu item. */\n  'aria-controls'?: string\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<FocusableElement>): MenuItemAria {\n  let {\n    key,\n    closeOnSelect,\n    isVirtualized,\n    'aria-haspopup': hasPopup,\n    onPressStart: pressStartProp,\n    onPressUp: pressUpProp,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onHoverStart: hoverStartProp,\n    onHoverChange,\n    onHoverEnd,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onFocusChange,\n    onBlur\n  } = props;\n\n  let isTrigger = !!hasPopup;\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let data = menuData.get(state);\n  let onClose = props.onClose || data.onClose;\n  let onAction = isTrigger ? () => {} : props.onAction || data.onAction;\n  let router = useRouter();\n  let performAction = (e: PressEvent) => {\n    if (onAction) {\n      onAction(key);\n    }\n\n    if (e.target instanceof HTMLAnchorElement) {\n      router.open(e.target, e);\n    }\n  };\n\n  let role = 'menuitem';\n  if (!isTrigger) {\n    if (state.selectionManager.selectionMode === 'single') {\n      role = 'menuitemradio';\n    } else if (state.selectionManager.selectionMode === 'multiple') {\n      role = 'menuitemcheckbox';\n    }\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    'aria-disabled': isDisabled || undefined,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\n    'aria-controls': props['aria-controls'],\n    'aria-haspopup': hasPopup,\n    'aria-expanded': props['aria-expanded']\n  };\n\n  if (state.selectionManager.selectionMode !== 'none' && !isTrigger) {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = item?.index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard') {\n      performAction(e);\n    }\n\n    pressStartProp?.(e);\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      performAction(e);\n\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (!isTrigger && onClose && (closeOnSelect ?? (state.selectionManager.selectionMode !== 'multiple' || state.selectionManager.isLink(key)))) {\n        onClose();\n      }\n    }\n\n    pressUpProp?.(e);\n  };\n\n  let {itemProps, isFocused} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true,\n    // Disable all handling of links in useSelectable item\n    // because we handle it ourselves. The behavior of menus\n    // is slightly different from other collections because\n    // actions are performed on key down rather than key up.\n    linkBehavior: 'none'\n  });\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPress,\n    onPressUp,\n    onPressChange,\n    onPressEnd,\n    isDisabled\n  });\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart(e) {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n      hoverStartProp?.(e);\n    },\n    onHoverChange,\n    onHoverEnd\n  });\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown: (e) => {\n      // Ignore repeating events, which may have started on the menu trigger before moving\n      // focus to the menu item. We want to wait for a second complete key press sequence.\n      if (e.repeat) {\n        e.continuePropagation();\n        return;\n      }\n\n      switch (e.key) {\n        case ' ':\n          if (!isDisabled && state.selectionManager.selectionMode === 'none' && !isTrigger && closeOnSelect !== false && onClose) {\n            onClose();\n          }\n          break;\n        case 'Enter':\n          // The Enter key should always close on select, except if overridden.\n          if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) {\n            onClose();\n          }\n          break;\n        default:\n          if (!isTrigger) {\n            e.continuePropagation();\n          }\n\n          onKeyDown?.(e);\n          break;\n      }\n    },\n    onKeyUp\n  });\n\n  let {focusProps} = useFocus({onBlur, onFocus, onFocusChange});\n  let domProps = filterDOMProps(item.props, {isLink: !!item?.props?.href});\n  delete domProps.id;\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(domProps, isTrigger ? {onFocus: itemProps.onFocus} : itemProps, pressProps, hoverProps, keyboardProps, focusProps),\n      tabIndex: itemProps.tabIndex != null ? -1 : undefined\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused,\n    isSelected,\n    isPressed,\n    isDisabled\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaMenuSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface MenuSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the section.\n */\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, using role=\"presentation\",\n      // and only use it as a label for the nested group.\n      id: headingId,\n      role: 'presentation'\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuItemProps} from './useMenuItem';\nimport {AriaMenuOptions} from './useMenu';\nimport type {AriaPopoverProps, OverlayProps} from '@react-aria/overlays';\nimport {FocusableElement, FocusStrategy, KeyboardEvent, PressEvent, Node as RSNode} from '@react-types/shared';\nimport {RefObject, useCallback, useRef} from 'react';\nimport type {SubmenuTriggerState} from '@react-stately/menu';\nimport {useEffectEvent, useId, useLayoutEffect} from '@react-aria/utils';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSafelyMouseToSubmenu} from './useSafelyMouseToSubmenu';\n\nexport interface AriaSubmenuTriggerProps {\n  /** An object representing the submenu trigger menu item. Contains all the relevant information that makes up the menu item. */\n  node: RSNode<unknown>,\n  /** Whether the submenu trigger is disabled. */\n  isDisabled?: boolean,\n  /** The type of the contents that the submenu trigger opens. */\n  type?: 'dialog' | 'menu',\n  /** Ref of the menu that contains the submenu trigger. */\n  parentMenuRef: RefObject<HTMLElement>,\n  /** Ref of the submenu opened by the submenu trigger. */\n  submenuRef: RefObject<HTMLElement>,\n  /**\n   * The delay time in milliseconds for the submenu to appear after hovering over the trigger.\n   * @default 200\n   */\n  delay?: number\n}\n\ninterface SubmenuTriggerProps extends AriaMenuItemProps {\n  /** Whether the submenu trigger is in an expanded state. */\n  isOpen: boolean\n}\n\ninterface SubmenuProps<T> extends AriaMenuOptions<T> {\n  /** The level of the submenu. */\n  submenuLevel: number\n}\n\nexport interface SubmenuTriggerAria<T> {\n  /** Props for the submenu trigger menu item. */\n  submenuTriggerProps: SubmenuTriggerProps,\n  /** Props for the submenu controlled by the submenu trigger menu item. */\n  submenuProps: SubmenuProps<T>,\n  /** Props for the submenu's popover container. */\n  popoverProps: Pick<AriaPopoverProps, 'isNonModal' | 'shouldCloseOnInteractOutside'> & Pick<OverlayProps, 'disableFocusManagement'>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a submenu trigger and its associated submenu.\n * @param props - Props for the submenu trigger and refs attach to its submenu and parent menu.\n * @param state - State for the submenu trigger.\n * @param ref - Ref to the submenu trigger element.\n */\nexport function UNSTABLE_useSubmenuTrigger<T>(props: AriaSubmenuTriggerProps, state: SubmenuTriggerState, ref: RefObject<FocusableElement>): SubmenuTriggerAria<T> {\n  let {parentMenuRef, submenuRef, type = 'menu', isDisabled, node, delay = 200} = props;\n  let submenuTriggerId = useId();\n  let overlayId = useId();\n  let {direction} = useLocale();\n  let openTimeout = useRef<ReturnType<typeof setTimeout> | undefined>();\n  let cancelOpenTimeout = useCallback(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n\n  let onSubmenuOpen = useEffectEvent((focusStrategy?: FocusStrategy) => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n\n  let onSubmenuClose = useEffectEvent(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n\n  useLayoutEffect(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n\n  let submenuKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (direction === 'ltr' && e.currentTarget.contains(e.target as Element)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'ArrowRight':\n        if (direction === 'rtl' && e.currentTarget.contains(e.target as Element)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'Escape':\n        e.stopPropagation();\n        state.closeAll();\n        break;\n    }\n  };\n\n  let submenuProps = {\n    id: overlayId,\n    'aria-label': node.textValue,\n    submenuLevel: state.submenuLevel,\n    ...(type === 'menu' && {\n      onClose: state.closeAll,\n      autoFocus: state.focusStrategy,\n      onKeyDown: submenuKeyDown\n    })\n  };\n\n  let submenuTriggerKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowRight':\n        if (!isDisabled) {\n          if (direction === 'ltr') {\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              submenuRef.current.focus();\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n\n        break;\n      case 'ArrowLeft':\n        if (!isDisabled) {\n          if (direction === 'rtl') {\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              submenuRef.current.focus();\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n        break;\n      case 'Escape':\n        state.closeAll();\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'virtual' || e.pointerType === 'keyboard')) {\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen('first');\n    }\n  };\n\n  let onPress = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'touch' || e.pointerType === 'mouse')) {\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n    }\n  };\n\n  let onHoverChange = (isHovered) => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) {\n          openTimeout.current = setTimeout(() => {\n            onSubmenuOpen();\n          }, delay);\n        }\n      } else if (!isHovered) {\n        cancelOpenTimeout();\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget)) {\n      onSubmenuClose();\n    }\n  };\n\n  let shouldCloseOnInteractOutside = (target) => {\n    if (target !== ref.current) {\n      return true;\n    }\n\n    return false;\n  };\n\n  useSafelyMouseToSubmenu({menuRef: parentMenuRef, submenuRef, isOpen: state.isOpen, isDisabled: isDisabled});\n\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      'aria-controls': state.isOpen ? overlayId : undefined,\n      'aria-haspopup': !isDisabled ? type : undefined,\n      'aria-expanded': state.isOpen ? 'true' : 'false',\n      onPressStart,\n      onPress,\n      onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      disableFocusManagement: true,\n      shouldCloseOnInteractOutside\n    }\n  };\n}\n","import {RefObject, useEffect, useRef, useState} from 'react';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useResizeObserver} from '@react-aria/utils';\n\ninterface SafelyMouseToSubmenuOptions {\n  /** Ref for the parent menu. */\n  menuRef: RefObject<Element>,\n  /** Ref for the submenu. */\n  submenuRef: RefObject<Element>,\n  /** Whether the submenu is open. */\n  isOpen: boolean,\n  /** Whether this feature is disabled. */\n  isDisabled?: boolean\n}\n\nconst ALLOWED_INVALID_MOVEMENTS = 2;\nconst THROTTLE_TIME = 50;\nconst TIMEOUT_TIME = 1000;\nconst ANGLE_PADDING = Math.PI / 12; // 15°\n\n/**\n * Allows the user to move their pointer to the submenu without it closing when their mouse leaves the trigger element.\n * Prevents pointer events from going to the underlying menu if the user is moving their pointer towards the sub-menu.\n */\nexport function useSafelyMouseToSubmenu(options: SafelyMouseToSubmenuOptions) {\n  let {menuRef, submenuRef, isOpen, isDisabled} = options;\n  let prevPointerPos = useRef<{x: number, y: number} | undefined>();\n  let submenuRect = useRef<DOMRect | undefined>();\n  let lastProcessedTime = useRef<number>(0);\n  let timeout = useRef<ReturnType<typeof setTimeout> | undefined>();\n  let autoCloseTimeout = useRef<ReturnType<typeof setTimeout> | undefined>();\n  let submenuSide = useRef<'left' | 'right' | undefined>();\n  let movementsTowardsSubmenuCount = useRef<number>(2);\n  let [preventPointerEvents, setPreventPointerEvents] = useState(false);\n\n  let updateSubmenuRect = () => {\n    if (submenuRef.current) {\n      submenuRect.current = submenuRef.current.getBoundingClientRect();\n      submenuSide.current = undefined;\n    }\n  };\n  useResizeObserver({ref: submenuRef, onResize: updateSubmenuRect});\n\n  let reset = () => {\n    setPreventPointerEvents(false);\n    movementsTowardsSubmenuCount.current = ALLOWED_INVALID_MOVEMENTS;\n  };\n\n  let modality = useInteractionModality();\n\n  useEffect(() => {\n    if (preventPointerEvents && menuRef.current) {\n      (menuRef.current as HTMLElement).style.pointerEvents = 'none';\n    } else {\n      (menuRef.current as HTMLElement).style.pointerEvents = '';\n    }\n  }, [menuRef, preventPointerEvents]);\n\n  useEffect(() => {\n    let submenu = submenuRef.current;\n    let menu = menuRef.current;\n\n    if (isDisabled || !submenu || !isOpen || modality !== 'pointer') {\n      reset();\n      return;\n    }\n    submenuRect.current = submenu.getBoundingClientRect();\n\n    let onPointerMove = (e: PointerEvent) => {\n      if (e.pointerType === 'touch' || e.pointerType === 'pen') {\n        return;\n      }\n\n      let currentTime = Date.now();\n\n      // Throttle\n      if (currentTime - lastProcessedTime.current < THROTTLE_TIME) {\n        return;\n      }\n      clearTimeout(timeout.current);\n      clearTimeout(autoCloseTimeout.current);\n\n      let {clientX: mouseX, clientY: mouseY} = e;\n\n      if (!prevPointerPos.current) {\n        prevPointerPos.current = {x: mouseX, y: mouseY};\n        return;\n      }\n\n      if (!submenuRect.current) {\n        return;\n      }\n\n      if (!submenuSide.current) {\n        submenuSide.current = mouseX > submenuRect.current.right ? 'left' : 'right';\n      }\n\n      // Pointer is outside of parent menu\n      if (mouseX < menu.getBoundingClientRect().left || mouseX > menu.getBoundingClientRect().right || mouseY < menu.getBoundingClientRect().top || mouseY > menu.getBoundingClientRect().bottom) {\n        reset();\n        return;\n      }\n\n      /* Check if pointer is moving towards submenu.\n        Uses the 2-argument arctangent (https://en.wikipedia.org/wiki/Atan2) to calculate:\n          - angle between previous pointer and top of submenu\n          - angle between previous pointer and bottom of submenu\n          - angle between previous pointer and current pointer (delta)\n        If the pointer delta angle value is between the top and bottom angle values, we know the pointer is moving towards the submenu.\n      */\n      let prevMouseX = prevPointerPos.current.x;\n      let prevMouseY = prevPointerPos.current.y;\n      let toSubmenuX = submenuSide.current === 'right' ? submenuRect.current.left - prevMouseX : prevMouseX - submenuRect.current.right;\n      let angleTop = Math.atan2(prevMouseY - submenuRect.current.top, toSubmenuX) + ANGLE_PADDING;\n      let angleBottom = Math.atan2(prevMouseY - submenuRect.current.bottom, toSubmenuX) - ANGLE_PADDING;\n      let anglePointer = Math.atan2(prevMouseY - mouseY, (submenuSide.current === 'left' ? -(mouseX - prevMouseX) : mouseX - prevMouseX));\n      let isMovingTowardsSubmenu = anglePointer < angleTop && anglePointer > angleBottom;\n\n      movementsTowardsSubmenuCount.current = isMovingTowardsSubmenu ?\n        Math.min(movementsTowardsSubmenuCount.current + 1, ALLOWED_INVALID_MOVEMENTS) :\n        Math.max(movementsTowardsSubmenuCount.current - 1, 0);\n\n      if (movementsTowardsSubmenuCount.current >= ALLOWED_INVALID_MOVEMENTS) {\n        setPreventPointerEvents(true);\n      } else {\n        setPreventPointerEvents(false);\n      }\n\n      lastProcessedTime.current = currentTime;\n      prevPointerPos.current = {x: mouseX, y: mouseY};\n\n      // If the pointer is moving towards the submenu, start a timeout to close if no other movements are made after 500ms.\n      if (isMovingTowardsSubmenu) {\n        timeout.current = setTimeout(() => {\n          reset();\n          autoCloseTimeout.current = setTimeout(() => {\n            // Fire a pointerover event to trigger the menu to close.\n            // Wait until pointer-events:none is no longer applied\n            let target = document.elementFromPoint(mouseX, mouseY);\n            if (target && menu.contains(target)) {\n              target.dispatchEvent(new PointerEvent('pointerover', {bubbles: true, cancelable: true}));\n            }\n          }, 100);\n        }, TIMEOUT_TIME);\n      }\n    };\n\n    window.addEventListener('pointermove', onPointerMove);\n\n    return () => {\n      window.removeEventListener('pointermove', onPointerMove);\n      clearTimeout(timeout.current);\n      clearTimeout(autoCloseTimeout.current);\n      movementsTowardsSubmenuCount.current = ALLOWED_INVALID_MOVEMENTS;\n    };\n\n  }, [isDisabled, isOpen, menuRef, modality, setPreventPointerEvents, submenuRef]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}