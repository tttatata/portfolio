{"ast":null,"code":"import { useMultiSelectListState } from \"./chunk-TP6TJAVS.mjs\";\n\n// src/use-multiselect-state.ts\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useState } from \"react\";\nfunction useMultiSelectState(props) {\n  const [isFocused, setFocused] = useState(false);\n  const triggerState = useMenuTriggerState(props);\n  const listState = useMultiSelectListState({\n    ...props,\n    onSelectionChange: keys => {\n      if (props.onSelectionChange != null) {\n        if (keys === \"all\") {\n          props.onSelectionChange(new Set(listState.collection.getKeys()));\n        } else {\n          props.onSelectionChange(keys);\n        }\n      }\n      if (props.selectionMode === \"single\") {\n        triggerState.close();\n      }\n    }\n  });\n  return {\n    ...listState,\n    ...triggerState,\n    close() {\n      triggerState.close();\n    },\n    open() {\n      if (listState.collection.size !== 0) {\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) {\n        triggerState.toggle(focusStrategy);\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\nexport { useMultiSelectState };","map":{"version":3,"names":["useMultiSelectListState","useMenuTriggerState","useState","useMultiSelectState","props","isFocused","setFocused","triggerState","listState","onSelectionChange","keys","Set","collection","getKeys","selectionMode","close","open","size","toggle","focusStrategy"],"sources":["D:/TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17/frontend/node_modules/@nextui-org/use-aria-multiselect/dist/chunk-OOXDMIM7.mjs"],"sourcesContent":["import {\n  useMultiSelectListState\n} from \"./chunk-TP6TJAVS.mjs\";\n\n// src/use-multiselect-state.ts\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useState } from \"react\";\nfunction useMultiSelectState(props) {\n  const [isFocused, setFocused] = useState(false);\n  const triggerState = useMenuTriggerState(props);\n  const listState = useMultiSelectListState({\n    ...props,\n    onSelectionChange: (keys) => {\n      if (props.onSelectionChange != null) {\n        if (keys === \"all\") {\n          props.onSelectionChange(new Set(listState.collection.getKeys()));\n        } else {\n          props.onSelectionChange(keys);\n        }\n      }\n      if (props.selectionMode === \"single\") {\n        triggerState.close();\n      }\n    }\n  });\n  return {\n    ...listState,\n    ...triggerState,\n    close() {\n      triggerState.close();\n    },\n    open() {\n      if (listState.collection.size !== 0) {\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy) {\n      if (listState.collection.size !== 0) {\n        triggerState.toggle(focusStrategy);\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\n\nexport {\n  useMultiSelectState\n};\n"],"mappings":"AAAA,SACEA,uBAAuB,QAClB,sBAAsB;;AAE7B;AACA,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAClC,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMK,YAAY,GAAGN,mBAAmB,CAACG,KAAK,CAAC;EAC/C,MAAMI,SAAS,GAAGR,uBAAuB,CAAC;IACxC,GAAGI,KAAK;IACRK,iBAAiB,EAAGC,IAAI,IAAK;MAC3B,IAAIN,KAAK,CAACK,iBAAiB,IAAI,IAAI,EAAE;QACnC,IAAIC,IAAI,KAAK,KAAK,EAAE;UAClBN,KAAK,CAACK,iBAAiB,CAAC,IAAIE,GAAG,CAACH,SAAS,CAACI,UAAU,CAACC,OAAO,EAAE,CAAC,CAAC;QAClE,CAAC,MAAM;UACLT,KAAK,CAACK,iBAAiB,CAACC,IAAI,CAAC;QAC/B;MACF;MACA,IAAIN,KAAK,CAACU,aAAa,KAAK,QAAQ,EAAE;QACpCP,YAAY,CAACQ,KAAK,EAAE;MACtB;IACF;EACF,CAAC,CAAC;EACF,OAAO;IACL,GAAGP,SAAS;IACZ,GAAGD,YAAY;IACfQ,KAAKA,CAAA,EAAG;MACNR,YAAY,CAACQ,KAAK,EAAE;IACtB,CAAC;IACDC,IAAIA,CAAA,EAAG;MACL,IAAIR,SAAS,CAACI,UAAU,CAACK,IAAI,KAAK,CAAC,EAAE;QACnCV,YAAY,CAACS,IAAI,EAAE;MACrB;IACF,CAAC;IACDE,MAAMA,CAACC,aAAa,EAAE;MACpB,IAAIX,SAAS,CAACI,UAAU,CAACK,IAAI,KAAK,CAAC,EAAE;QACnCV,YAAY,CAACW,MAAM,CAACC,aAAa,CAAC;MACpC;IACF,CAAC;IACDd,SAAS;IACTC;EACF,CAAC;AACH;AAEA,SACEH,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}