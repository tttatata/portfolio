{"ast":null,"code":"import $682989befd4f478d$exports from \"./ar-AE.mjs\";\nimport $f7fca02019afd941$exports from \"./bg-BG.mjs\";\nimport $8f86f40be75387f1$exports from \"./cs-CZ.mjs\";\nimport $db24ba43c8d652ee$exports from \"./da-DK.mjs\";\nimport $f8f1e72c8b5447d6$exports from \"./de-DE.mjs\";\nimport $9a73ed2983c3ab0b$exports from \"./el-GR.mjs\";\nimport $583de0b3587601b9$exports from \"./en-US.mjs\";\nimport $147159c978043442$exports from \"./es-ES.mjs\";\nimport $5cbb62c8a19173ac$exports from \"./et-EE.mjs\";\nimport $a33d71dc804cc59e$exports from \"./fi-FI.mjs\";\nimport $92d800447793d084$exports from \"./fr-FR.mjs\";\nimport $fe732cdb32124ea8$exports from \"./he-IL.mjs\";\nimport $e41234e934efb4f5$exports from \"./hr-HR.mjs\";\nimport $1b0393182473bf9e$exports from \"./hu-HU.mjs\";\nimport $2eed782c1c110ce7$exports from \"./it-IT.mjs\";\nimport $8b5d459f86e9b23c$exports from \"./ja-JP.mjs\";\nimport $1949c3ad17295fd4$exports from \"./ko-KR.mjs\";\nimport $f5e3df4dc8aa7b54$exports from \"./lt-LT.mjs\";\nimport $9dd86690a5c2b2c5$exports from \"./lv-LV.mjs\";\nimport $843964c3bf9a7d24$exports from \"./nb-NO.mjs\";\nimport $73f50e845f9ef3b4$exports from \"./nl-NL.mjs\";\nimport $87f92a7e077514b2$exports from \"./pl-PL.mjs\";\nimport $c28c98d58ee9ff6f$exports from \"./pt-BR.mjs\";\nimport $b6b1503b17b2254d$exports from \"./pt-PT.mjs\";\nimport $8bdaeb71e50c3e1a$exports from \"./ro-RO.mjs\";\nimport $ec2b852dd7c3d1f2$exports from \"./ru-RU.mjs\";\nimport $79e6d900d6a4f82d$exports from \"./sk-SK.mjs\";\nimport $f4c1f0d5d4d03d80$exports from \"./sl-SI.mjs\";\nimport $46252cd87269b10b$exports from \"./sr-SP.mjs\";\nimport $d4d5d8dab362555c$exports from \"./sv-SE.mjs\";\nimport $3d55d1f97c377e83$exports from \"./tr-TR.mjs\";\nimport $5368512f1c703a3f$exports from \"./uk-UA.mjs\";\nimport $f1316b1074463583$exports from \"./zh-CN.mjs\";\nimport $7e60654723031b6f$exports from \"./zh-TW.mjs\";\nimport { getNthItem as $cVkRF$getNthItem, getChildNodes as $cVkRF$getChildNodes, getLastItem as $cVkRF$getLastItem, getFirstItem as $cVkRF$getFirstItem } from \"@react-stately/collections\";\nimport { Rect as $cVkRF$Rect } from \"@react-stately/virtualizer\";\nimport { useId as $cVkRF$useId, filterDOMProps as $cVkRF$filterDOMProps, mergeProps as $cVkRF$mergeProps, useUpdateEffect as $cVkRF$useUpdateEffect, useDescription as $cVkRF$useDescription, scrollIntoViewport as $cVkRF$scrollIntoViewport, getScrollParent as $cVkRF$getScrollParent } from \"@react-aria/utils\";\nimport { useMemo as $cVkRF$useMemo, useCallback as $cVkRF$useCallback, useRef as $cVkRF$useRef } from \"react\";\nimport { useCollator as $cVkRF$useCollator, useLocale as $cVkRF$useLocale, useLocalizedStringFormatter as $cVkRF$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useHasTabbableChild as $cVkRF$useHasTabbableChild, getFocusableTreeWalker as $cVkRF$getFocusableTreeWalker, focusSafely as $cVkRF$focusSafely } from \"@react-aria/focus\";\nimport { useSelectableCollection as $cVkRF$useSelectableCollection, useSelectableItem as $cVkRF$useSelectableItem } from \"@react-aria/selection\";\nimport { announce as $cVkRF$announce } from \"@react-aria/live-announcer\";\nimport { useInteractionModality as $cVkRF$useInteractionModality, isFocusVisible as $cVkRF$isFocusVisible } from \"@react-aria/interactions\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nclass $d1c300d9c497e402$export$de9feff04fda126e {\n  isCell(node) {\n    return node.type === \"cell\";\n  }\n  isRow(node) {\n    return node.type === \"row\" || node.type === \"item\";\n  }\n  findPreviousKey(fromKey, pred) {\n    let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!this.disabledKeys.has(key) && (!pred || pred(item))) return key;\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n  findNextKey(fromKey, pred) {\n    let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!this.disabledKeys.has(key) && (!pred || pred(item))) return key;\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n  getKeyBelow(key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) return;\n    // If focus was on a cell, start searching from the parent row\n    if (this.isCell(startItem)) key = startItem.parentKey;\n    // Find the next item\n    key = this.findNextKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the next row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return (0, $cVkRF$getNthItem)((0, $cVkRF$getChildNodes)(item, this.collection), startItem.index).key;\n      }\n      // Otherwise, focus the next row\n      if (this.focusMode === \"row\") return key;\n    }\n  }\n  getKeyAbove(key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) return;\n    // If focus is on a cell, start searching from the parent row\n    if (this.isCell(startItem)) key = startItem.parentKey;\n    // Find the previous item\n    key = this.findPreviousKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the previous row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return (0, $cVkRF$getNthItem)((0, $cVkRF$getChildNodes)(item, this.collection), startItem.index).key;\n      }\n      // Otherwise, focus the previous row\n      if (this.focusMode === \"row\") return key;\n    }\n  }\n  getKeyRightOf(key) {\n    let item = this.collection.getItem(key);\n    if (!item) return;\n    // If focus is on a row, focus the first child cell.\n    if (this.isRow(item)) {\n      let children = (0, $cVkRF$getChildNodes)(item, this.collection);\n      return this.direction === \"rtl\" ? (0, $cVkRF$getLastItem)(children).key : (0, $cVkRF$getFirstItem)(children).key;\n    }\n    // If focus is on a cell, focus the next cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = (0, $cVkRF$getChildNodes)(parent, this.collection);\n      let next = this.direction === \"rtl\" ? (0, $cVkRF$getNthItem)(children, item.index - 1) : (0, $cVkRF$getNthItem)(children, item.index + 1);\n      if (next) return next.key;\n      // focus row only if focusMode is set to row\n      if (this.focusMode === \"row\") return item.parentKey;\n      return this.direction === \"rtl\" ? this.getFirstKey(key) : this.getLastKey(key);\n    }\n  }\n  getKeyLeftOf(key) {\n    let item = this.collection.getItem(key);\n    if (!item) return;\n    // If focus is on a row, focus the last child cell.\n    if (this.isRow(item)) {\n      let children = (0, $cVkRF$getChildNodes)(item, this.collection);\n      return this.direction === \"rtl\" ? (0, $cVkRF$getFirstItem)(children).key : (0, $cVkRF$getLastItem)(children).key;\n    }\n    // If focus is on a cell, focus the previous cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = (0, $cVkRF$getChildNodes)(parent, this.collection);\n      let prev = this.direction === \"rtl\" ? (0, $cVkRF$getNthItem)(children, item.index + 1) : (0, $cVkRF$getNthItem)(children, item.index - 1);\n      if (prev) return prev.key;\n      // focus row only if focusMode is set to row\n      if (this.focusMode === \"row\") return item.parentKey;\n      return this.direction === \"rtl\" ? this.getLastKey(key) : this.getFirstKey(key);\n    }\n  }\n  getFirstKey(key, global) {\n    let item;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) return;\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the first cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        return (0, $cVkRF$getFirstItem)((0, $cVkRF$getChildNodes)(parent, this.collection)).key;\n      }\n    }\n    // Find the first row\n    key = this.findNextKey();\n    // If global flag is set (or if focus mode is cell), focus the first cell in the first row.\n    if (key != null && item && this.isCell(item) && global || this.focusMode === \"cell\") {\n      let item = this.collection.getItem(key);\n      key = (0, $cVkRF$getFirstItem)((0, $cVkRF$getChildNodes)(item, this.collection)).key;\n    }\n    // Otherwise, focus the row itself.\n    return key;\n  }\n  getLastKey(key, global) {\n    let item;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) return;\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the last cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        let children = (0, $cVkRF$getChildNodes)(parent, this.collection);\n        return (0, $cVkRF$getLastItem)(children).key;\n      }\n    }\n    // Find the last row\n    key = this.findPreviousKey();\n    // If global flag is set (or if focus mode is cell), focus the last cell in the last row.\n    if (key != null && item && this.isCell(item) && global || this.focusMode === \"cell\") {\n      let item = this.collection.getItem(key);\n      let children = (0, $cVkRF$getChildNodes)(item, this.collection);\n      key = (0, $cVkRF$getLastItem)(children).key;\n    }\n    // Otherwise, focus the row itself.\n    return key;\n  }\n  getItem(key) {\n    return this.ref.current.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n  }\n  getItemRect(key) {\n    var _this_layout_getLayoutInfo;\n    if (this.layout) return (_this_layout_getLayoutInfo = this.layout.getLayoutInfo(key)) === null || _this_layout_getLayoutInfo === void 0 ? void 0 : _this_layout_getLayoutInfo.rect;\n    let item = this.getItem(key);\n    if (item) return new (0, $cVkRF$Rect)(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);\n  }\n  getPageHeight() {\n    var _this_layout_virtualizer, _this_ref_current, _this_ref;\n    if (this.layout) return (_this_layout_virtualizer = this.layout.virtualizer) === null || _this_layout_virtualizer === void 0 ? void 0 : _this_layout_virtualizer.visibleRect.height;\n    return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.offsetHeight;\n  }\n  getContentHeight() {\n    var _this_ref_current, _this_ref;\n    if (this.layout) return this.layout.getContentSize().height;\n    return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.scrollHeight;\n  }\n  getKeyPageAbove(key) {\n    let itemRect = this.getItemRect(key);\n    if (!itemRect) return null;\n    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());\n    while (itemRect && itemRect.y > pageY) {\n      key = this.getKeyAbove(key);\n      itemRect = this.getItemRect(key);\n    }\n    return key;\n  }\n  getKeyPageBelow(key) {\n    let itemRect = this.getItemRect(key);\n    if (!itemRect) return null;\n    let pageHeight = this.getPageHeight();\n    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);\n    while (itemRect && itemRect.maxY < pageY) {\n      let nextKey = this.getKeyBelow(key);\n      itemRect = this.getItemRect(nextKey);\n      // Guard against case where maxY of the last key is barely less than pageY due to rounding\n      // and thus it attempts to set key to null\n      if (nextKey != null) key = nextKey;\n    }\n    return key;\n  }\n  getKeyForSearch(search, fromKey) {\n    if (!this.collator) return null;\n    let collection = this.collection;\n    let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();\n    // If the starting key is a cell, search from its parent row.\n    let startItem = collection.getItem(key);\n    if (startItem.type === \"cell\") key = startItem.parentKey;\n    let hasWrapped = false;\n    while (key != null) {\n      let item = collection.getItem(key);\n      // check row text value for match\n      if (item.textValue) {\n        let substring = item.textValue.slice(0, search.length);\n        if (this.collator.compare(substring, search) === 0) {\n          if (this.isRow(item) && this.focusMode === \"cell\") return (0, $cVkRF$getFirstItem)((0, $cVkRF$getChildNodes)(item, this.collection)).key;\n          return item.key;\n        }\n      }\n      key = this.findNextKey(key);\n      // Wrap around when reaching the end of the collection\n      if (key == null && !hasWrapped) {\n        key = this.getFirstKey();\n        hasWrapped = true;\n      }\n    }\n    return null;\n  }\n  constructor(options) {\n    this.collection = options.collection;\n    this.disabledKeys = options.disabledKeys;\n    this.ref = options.ref;\n    this.direction = options.direction;\n    this.collator = options.collator;\n    this.layout = options.layout;\n    this.focusMode = options.focusMode || \"row\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $1af922eb41e03c8f$export$e6235c0d09b995d0 = new WeakMap();\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $835c96616a7cb4f9$exports = {};\n$835c96616a7cb4f9$exports = {\n  \"ar-AE\": $682989befd4f478d$exports,\n  \"bg-BG\": $f7fca02019afd941$exports,\n  \"cs-CZ\": $8f86f40be75387f1$exports,\n  \"da-DK\": $db24ba43c8d652ee$exports,\n  \"de-DE\": $f8f1e72c8b5447d6$exports,\n  \"el-GR\": $9a73ed2983c3ab0b$exports,\n  \"en-US\": $583de0b3587601b9$exports,\n  \"es-ES\": $147159c978043442$exports,\n  \"et-EE\": $5cbb62c8a19173ac$exports,\n  \"fi-FI\": $a33d71dc804cc59e$exports,\n  \"fr-FR\": $92d800447793d084$exports,\n  \"he-IL\": $fe732cdb32124ea8$exports,\n  \"hr-HR\": $e41234e934efb4f5$exports,\n  \"hu-HU\": $1b0393182473bf9e$exports,\n  \"it-IT\": $2eed782c1c110ce7$exports,\n  \"ja-JP\": $8b5d459f86e9b23c$exports,\n  \"ko-KR\": $1949c3ad17295fd4$exports,\n  \"lt-LT\": $f5e3df4dc8aa7b54$exports,\n  \"lv-LV\": $9dd86690a5c2b2c5$exports,\n  \"nb-NO\": $843964c3bf9a7d24$exports,\n  \"nl-NL\": $73f50e845f9ef3b4$exports,\n  \"pl-PL\": $87f92a7e077514b2$exports,\n  \"pt-BR\": $c28c98d58ee9ff6f$exports,\n  \"pt-PT\": $b6b1503b17b2254d$exports,\n  \"ro-RO\": $8bdaeb71e50c3e1a$exports,\n  \"ru-RU\": $ec2b852dd7c3d1f2$exports,\n  \"sk-SK\": $79e6d900d6a4f82d$exports,\n  \"sl-SI\": $f4c1f0d5d4d03d80$exports,\n  \"sr-SP\": $46252cd87269b10b$exports,\n  \"sv-SE\": $d4d5d8dab362555c$exports,\n  \"tr-TR\": $3d55d1f97c377e83$exports,\n  \"uk-UA\": $5368512f1c703a3f$exports,\n  \"zh-CN\": $f1316b1074463583$exports,\n  \"zh-TW\": $7e60654723031b6f$exports\n};\nfunction $92599c3fd427b763$export$137e594ef3218a10(props, state) {\n  let {\n    getRowText = key => {\n      var _state_collection_getTextValue, _state_collection, _state_collection_getItem;\n      var _state_collection_getTextValue1;\n      return (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;\n    }\n  } = props;\n  let stringFormatter = (0, $cVkRF$useLocalizedStringFormatter)((0, /*@__PURE__*/$parcel$interopDefault($835c96616a7cb4f9$exports)), \"@react-aria/grid\");\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = (0, $cVkRF$useRef)(selection);\n  (0, $cVkRF$useUpdateEffect)(() => {\n    var _lastSelection_current;\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n      return;\n    }\n    let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);\n    let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === \"replace\";\n    let messages = [];\n    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) messages.push(stringFormatter.format(\"selectedItem\", {\n          item: currentSelectionText\n        }));\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) messages.push(stringFormatter.format(\"selectedItem\", {\n        item: addedText\n      }));\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) messages.push(stringFormatter.format(\"deselectedItem\", {\n          item: removedText\n        }));\n      }\n    }\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === \"multiple\") {\n      if (messages.length === 0 || selection === \"all\" || selection.size > 1 || lastSelection.current === \"all\" || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === \"all\" ? stringFormatter.format(\"selectedAll\") : stringFormatter.format(\"selectedCount\", {\n        count: selection.size\n      }));\n    }\n    if (messages.length > 0) (0, $cVkRF$announce)(messages.join(\" \"));\n    lastSelection.current = selection;\n  }, [selection]);\n}\nfunction $92599c3fd427b763$var$diffSelection(a, b) {\n  let res = new Set();\n  if (a === \"all\" || b === \"all\") return res;\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $5b9b5b5723db6ae1$export$be42ebdab07ae4c2(props) {\n  let stringFormatter = (0, $cVkRF$useLocalizedStringFormatter)((0, /*@__PURE__*/$parcel$interopDefault($835c96616a7cb4f9$exports)), \"@react-aria/grid\");\n  let modality = (0, $cVkRF$useInteractionModality)();\n  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page\n  let shouldLongPress = (modality === \"pointer\" || modality === \"virtual\" || modality == null) && typeof window !== \"undefined\" && \"ontouchstart\" in window;\n  let interactionDescription = (0, $cVkRF$useMemo)(() => {\n    let selectionMode = props.selectionManager.selectionMode;\n    let selectionBehavior = props.selectionManager.selectionBehavior;\n    let message = undefined;\n    if (shouldLongPress) message = stringFormatter.format(\"longPressToSelect\");\n    return selectionBehavior === \"replace\" && selectionMode !== \"none\" && props.hasItemActions ? message : undefined;\n  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, stringFormatter, shouldLongPress]);\n  let descriptionProps = (0, $cVkRF$useDescription)(interactionDescription);\n  return descriptionProps;\n}\nfunction $83c6e2eafa584c67$export$f6b86a04e5d66d90(props, state, ref) {\n  let {\n    isVirtualized: isVirtualized,\n    keyboardDelegate: keyboardDelegate,\n    focusMode: focusMode,\n    scrollRef: scrollRef,\n    getRowText: getRowText,\n    onRowAction: onRowAction,\n    onCellAction: onCellAction\n  } = props;\n  let {\n    selectionManager: manager\n  } = state;\n  if (!props[\"aria-label\"] && !props[\"aria-labelledby\"]) console.warn(\"An aria-label or aria-labelledby prop is required for accessibility.\");\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $cVkRF$useCollator)({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  let {\n    direction: direction\n  } = (0, $cVkRF$useLocale)();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = (0, $cVkRF$useMemo)(() => keyboardDelegate || new (0, $d1c300d9c497e402$export$de9feff04fda126e)({\n    collection: state.collection,\n    disabledKeys: disabledBehavior === \"selection\" ? new Set() : state.disabledKeys,\n    ref: ref,\n    direction: direction,\n    collator: collator,\n    focusMode: focusMode\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, focusMode]);\n  let {\n    collectionProps: collectionProps\n  } = (0, $cVkRF$useSelectableCollection)({\n    ref: ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    isVirtualized: isVirtualized,\n    scrollRef: scrollRef\n  });\n  let id = (0, $cVkRF$useId)(props.id);\n  (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).set(state, {\n    keyboardDelegate: delegate,\n    actions: {\n      onRowAction: onRowAction,\n      onCellAction: onCellAction\n    }\n  });\n  let descriptionProps = (0, $5b9b5b5723db6ae1$export$be42ebdab07ae4c2)({\n    selectionManager: manager,\n    hasItemActions: !!(onRowAction || onCellAction)\n  });\n  let domProps = (0, $cVkRF$filterDOMProps)(props, {\n    labelable: true\n  });\n  let onFocus = (0, $cVkRF$useCallback)(e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n  }, [manager]);\n  // Continue to track collection focused state even if keyboard navigation is disabled\n  let navDisabledHandlers = (0, $cVkRF$useMemo)(() => ({\n    onBlur: collectionProps.onBlur,\n    onFocus: onFocus\n  }), [onFocus, collectionProps.onBlur]);\n  let hasTabbableChild = (0, $cVkRF$useHasTabbableChild)(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n  let gridProps = (0, $cVkRF$mergeProps)(domProps, {\n    role: \"grid\",\n    id: id,\n    \"aria-multiselectable\": manager.selectionMode === \"multiple\" ? \"true\" : undefined\n  }, state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps,\n  // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n  state.collection.size === 0 && {\n    tabIndex: hasTabbableChild ? -1 : 0\n  }, descriptionProps);\n  if (isVirtualized) {\n    gridProps[\"aria-rowcount\"] = state.collection.size;\n    gridProps[\"aria-colcount\"] = state.collection.columnCount;\n  }\n  (0, $92599c3fd427b763$export$137e594ef3218a10)({\n    getRowText: getRowText\n  }, state);\n  return {\n    gridProps: gridProps\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf() {\n  return {\n    rowGroupProps: {\n      role: \"rowgroup\"\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref) {\n  let {\n    node: node,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onAction\n  } = props;\n  let {\n    actions: {\n      onRowAction: onRowAction\n    }\n  } = (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);\n  let {\n    itemProps: itemProps,\n    ...states\n  } = (0, $cVkRF$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref: ref,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onRowAction ? () => onRowAction(node.key) : onAction,\n    isDisabled: state.collection.size === 0\n  });\n  let isSelected = state.selectionManager.isSelected(node.key);\n  let rowProps = {\n    role: \"row\",\n    \"aria-selected\": state.selectionManager.selectionMode !== \"none\" ? isSelected : undefined,\n    \"aria-disabled\": states.isDisabled || undefined,\n    ...itemProps\n  };\n  if (isVirtualized) rowProps[\"aria-rowindex\"] = node.index + 1; // aria-rowindex is 1 based\n  return {\n    rowProps: rowProps,\n    ...states\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref) {\n  let {\n    node: node,\n    isVirtualized: isVirtualized,\n    focusMode = \"child\",\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onAction\n  } = props;\n  let {\n    direction: direction\n  } = (0, $cVkRF$useLocale)();\n  let {\n    keyboardDelegate: keyboardDelegate,\n    actions: {\n      onCellAction: onCellAction\n    }\n  } = (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);\n  // We need to track the key of the item at the time it was last focused so that we force\n  // focus to go to the item when the DOM node is reused for a different item in a virtualizer.\n  let keyWhenFocused = (0, $cVkRF$useRef)(null);\n  // Handles focusing the cell. If there is a focusable child,\n  // it is focused, otherwise the cell itself is focused.\n  let focus = () => {\n    let treeWalker = (0, $cVkRF$getFocusableTreeWalker)(ref.current);\n    if (focusMode === \"child\") {\n      // If focus is already on a focusable child within the cell, early return so we don't shift focus\n      if (ref.current.contains(document.activeElement) && ref.current !== document.activeElement) return;\n      let focusable = state.selectionManager.childFocusStrategy === \"last\" ? $ab90dcbc1b5466d0$var$last(treeWalker) : treeWalker.firstChild();\n      if (focusable) {\n        (0, $cVkRF$focusSafely)(focusable);\n        return;\n      }\n    }\n    if (keyWhenFocused.current != null && node.key !== keyWhenFocused.current || !ref.current.contains(document.activeElement)) (0, $cVkRF$focusSafely)(ref.current);\n  };\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed\n  } = (0, $cVkRF$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref: ref,\n    isVirtualized: isVirtualized,\n    focus: focus,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onCellAction ? () => onCellAction(node.key) : onAction,\n    isDisabled: state.collection.size === 0\n  });\n  let onKeyDownCapture = e => {\n    if (!e.currentTarget.contains(e.target) || state.isKeyboardNavigationDisabled) return;\n    let walker = (0, $cVkRF$getFocusableTreeWalker)(ref.current);\n    walker.currentNode = document.activeElement;\n    switch (e.key) {\n      case \"ArrowLeft\":\n        {\n          // Find the next focusable element within the cell.\n          let focusable = direction === \"rtl\" ? walker.nextNode() : walker.previousNode();\n          // Don't focus the cell itself if focusMode is \"child\"\n          if (focusMode === \"child\" && focusable === ref.current) focusable = null;\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            (0, $cVkRF$focusSafely)(focusable);\n            (0, $cVkRF$scrollIntoViewport)(focusable, {\n              containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n            });\n          } else {\n            // If there is no next focusable child, then move to the next cell to the left of this one.\n            // This will be handled by useSelectableCollection. However, if there is no cell to the left\n            // of this one, only one column, and the grid doesn't focus rows, then the next key will be the\n            // same as this one. In that case we need to handle focusing either the cell or the first/last\n            // child, depending on the focus mode.\n            let prev = keyboardDelegate.getKeyLeftOf(node.key);\n            if (prev !== node.key) break;\n            e.preventDefault();\n            e.stopPropagation();\n            if (focusMode === \"cell\" && direction === \"rtl\") {\n              (0, $cVkRF$focusSafely)(ref.current);\n              (0, $cVkRF$scrollIntoViewport)(ref.current, {\n                containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n              });\n            } else {\n              walker.currentNode = ref.current;\n              focusable = direction === \"rtl\" ? walker.firstChild() : $ab90dcbc1b5466d0$var$last(walker);\n              if (focusable) {\n                (0, $cVkRF$focusSafely)(focusable);\n                (0, $cVkRF$scrollIntoViewport)(focusable, {\n                  containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n                });\n              }\n            }\n          }\n          break;\n        }\n      case \"ArrowRight\":\n        {\n          let focusable = direction === \"rtl\" ? walker.previousNode() : walker.nextNode();\n          if (focusMode === \"child\" && focusable === ref.current) focusable = null;\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            (0, $cVkRF$focusSafely)(focusable);\n            (0, $cVkRF$scrollIntoViewport)(focusable, {\n              containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n            });\n          } else {\n            let next = keyboardDelegate.getKeyRightOf(node.key);\n            if (next !== node.key) break;\n            e.preventDefault();\n            e.stopPropagation();\n            if (focusMode === \"cell\" && direction === \"ltr\") {\n              (0, $cVkRF$focusSafely)(ref.current);\n              (0, $cVkRF$scrollIntoViewport)(ref.current, {\n                containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n              });\n            } else {\n              walker.currentNode = ref.current;\n              focusable = direction === \"rtl\" ? $ab90dcbc1b5466d0$var$last(walker) : walker.firstChild();\n              if (focusable) {\n                (0, $cVkRF$focusSafely)(focusable);\n                (0, $cVkRF$scrollIntoViewport)(focusable, {\n                  containingElement: (0, $cVkRF$getScrollParent)(ref.current)\n                });\n              }\n            }\n          }\n          break;\n        }\n      case \"ArrowUp\":\n      case \"ArrowDown\":\n        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate\n        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));\n        }\n        break;\n    }\n  };\n  // Grid cells can have focusable elements inside them. In this case, focus should\n  // be marshalled to that element rather than focusing the cell itself.\n  let onFocus = e => {\n    keyWhenFocused.current = node.key;\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the gridcell itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row/cell\n      // in that case since the table should act like a single tab stop.\n      if (!(0, $cVkRF$isFocusVisible)()) state.selectionManager.setFocusedKey(node.key);\n      return;\n    }\n    // If the cell itself is focused, wait a frame so that focus finishes propagatating\n    // up to the tree, and move focus to a focusable child if possible.\n    requestAnimationFrame(() => {\n      if (focusMode === \"child\" && document.activeElement === ref.current) focus();\n    });\n  };\n  let gridCellProps = (0, $cVkRF$mergeProps)(itemProps, {\n    role: \"gridcell\",\n    onKeyDownCapture: onKeyDownCapture,\n    onFocus: onFocus\n  });\n  var _node_colIndex;\n  if (isVirtualized) gridCellProps[\"aria-colindex\"] = ((_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index) + 1; // aria-colindex is 1-based\n  // When pressing with a pointer and cell selection is not enabled, usePress will be applied to the\n  // row rather than the cell. However, when the row is draggable, usePress cannot preventDefault\n  // on pointer down, so the browser will try to focus the cell which has a tabIndex applied.\n  // To avoid this, remove the tabIndex from the cell briefly on pointer down.\n  if (shouldSelectOnPressUp && gridCellProps.tabIndex != null && gridCellProps.onPointerDown == null) gridCellProps.onPointerDown = e => {\n    let el = e.currentTarget;\n    let tabindex = el.getAttribute(\"tabindex\");\n    el.removeAttribute(\"tabindex\");\n    requestAnimationFrame(() => {\n      el.setAttribute(\"tabindex\", tabindex);\n    });\n  };\n  return {\n    gridCellProps: gridCellProps,\n    isPressed: isPressed\n  };\n}\nfunction $ab90dcbc1b5466d0$var$last(walker) {\n  let next;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nfunction $7cb39d07f245a780$export$70e2eed1a92976ad(props, state) {\n  let {\n    key: key\n  } = props;\n  let manager = state.selectionManager;\n  let checkboxId = (0, $cVkRF$useId)();\n  let isDisabled = !state.selectionManager.canSelectItem(key);\n  let isSelected = state.selectionManager.isSelected(key);\n  let onChange = () => manager.select(key);\n  const stringFormatter = (0, $cVkRF$useLocalizedStringFormatter)((0, /*@__PURE__*/$parcel$interopDefault($835c96616a7cb4f9$exports)), \"@react-aria/grid\");\n  return {\n    checkboxProps: {\n      id: checkboxId,\n      \"aria-label\": stringFormatter.format(\"select\"),\n      isSelected: isSelected,\n      isDisabled: isDisabled,\n      onChange: onChange\n    }\n  };\n}\nexport { $d1c300d9c497e402$export$de9feff04fda126e as GridKeyboardDelegate, $83c6e2eafa584c67$export$f6b86a04e5d66d90 as useGrid, $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf as useGridRowGroup, $4159a7a9cbb0cc18$export$96357d5a73f686fa as useGridRow, $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c as useGridCell, $7cb39d07f245a780$export$70e2eed1a92976ad as useGridSelectionCheckbox, $5b9b5b5723db6ae1$export$be42ebdab07ae4c2 as useHighlightSelectionDescription, $92599c3fd427b763$export$137e594ef3218a10 as useGridSelectionAnnouncement };","map":{"version":3,"names":["$d1c300d9c497e402$export$de9feff04fda126e","isCell","node","type","isRow","findPreviousKey","fromKey","pred","key","collection","getKeyBefore","getLastKey","item","getItem","disabledKeys","has","findNextKey","getKeyAfter","getFirstKey","getKeyBelow","startItem","parentKey","$cVkRF$getNthItem","$cVkRF$getChildNodes","index","focusMode","getKeyAbove","getKeyRightOf","children","direction","$cVkRF$getLastItem","$cVkRF$getFirstItem","parent","next","getKeyLeftOf","prev","global","ref","current","querySelector","CSS","escape","toString","getItemRect","_this_layout_getLayoutInfo","layout","getLayoutInfo","rect","$cVkRF$Rect","offsetLeft","offsetTop","offsetWidth","offsetHeight","getPageHeight","_this_layout_virtualizer","_this_ref_current","_this_ref","virtualizer","visibleRect","height","getContentHeight","getContentSize","scrollHeight","getKeyPageAbove","itemRect","pageY","Math","max","maxY","y","getKeyPageBelow","pageHeight","min","nextKey","getKeyForSearch","search","collator","hasWrapped","textValue","substring","slice","length","compare","constructor","options","$1af922eb41e03c8f$export$e6235c0d09b995d0","WeakMap","$835c96616a7cb4f9$exports","$682989befd4f478d$exports","$f7fca02019afd941$exports","$8f86f40be75387f1$exports","$db24ba43c8d652ee$exports","$f8f1e72c8b5447d6$exports","$9a73ed2983c3ab0b$exports","$583de0b3587601b9$exports","$147159c978043442$exports","$5cbb62c8a19173ac$exports","$a33d71dc804cc59e$exports","$92d800447793d084$exports","$fe732cdb32124ea8$exports","$e41234e934efb4f5$exports","$1b0393182473bf9e$exports","$2eed782c1c110ce7$exports","$8b5d459f86e9b23c$exports","$1949c3ad17295fd4$exports","$f5e3df4dc8aa7b54$exports","$9dd86690a5c2b2c5$exports","$843964c3bf9a7d24$exports","$73f50e845f9ef3b4$exports","$87f92a7e077514b2$exports","$c28c98d58ee9ff6f$exports","$b6b1503b17b2254d$exports","$8bdaeb71e50c3e1a$exports","$ec2b852dd7c3d1f2$exports","$79e6d900d6a4f82d$exports","$f4c1f0d5d4d03d80$exports","$46252cd87269b10b$exports","$d4d5d8dab362555c$exports","$3d55d1f97c377e83$exports","$5368512f1c703a3f$exports","$f1316b1074463583$exports","$7e60654723031b6f$exports","$92599c3fd427b763$export$137e594ef3218a10","props","state","getRowText","_state_collection_getTextValue","_state_collection","_state_collection_getItem","_state_collection_getTextValue1","getTextValue","call","stringFormatter","$cVkRF$useLocalizedStringFormatter","$parcel$interopDefault","selection","selectionManager","rawSelection","lastSelection","$cVkRF$useRef","$cVkRF$useUpdateEffect","_lastSelection_current","isFocused","addedKeys","$92599c3fd427b763$var$diffSelection","removedKeys","isReplace","selectionBehavior","messages","selectedKeys","size","keys","value","currentSelectionText","push","format","addedText","removedText","selectionMode","count","$cVkRF$announce","join","a","b","res","Set","add","$5b9b5b5723db6ae1$export$be42ebdab07ae4c2","modality","$cVkRF$useInteractionModality","shouldLongPress","window","interactionDescription","$cVkRF$useMemo","message","undefined","hasItemActions","descriptionProps","$cVkRF$useDescription","$83c6e2eafa584c67$export$f6b86a04e5d66d90","isVirtualized","keyboardDelegate","scrollRef","onRowAction","onCellAction","manager","console","warn","$cVkRF$useCollator","usage","sensitivity","$cVkRF$useLocale","disabledBehavior","delegate","collectionProps","$cVkRF$useSelectableCollection","id","$cVkRF$useId","set","actions","domProps","$cVkRF$filterDOMProps","labelable","onFocus","$cVkRF$useCallback","e","currentTarget","contains","target","setFocused","navDisabledHandlers","onBlur","hasTabbableChild","$cVkRF$useHasTabbableChild","isDisabled","gridProps","$cVkRF$mergeProps","role","isKeyboardNavigationDisabled","tabIndex","columnCount","$e45487f8ba1cbdbf$export$d3037f5d3f3e51bf","rowGroupProps","$4159a7a9cbb0cc18$export$96357d5a73f686fa","shouldSelectOnPressUp","onAction","get","itemProps","states","$cVkRF$useSelectableItem","isSelected","rowProps","$ab90dcbc1b5466d0$export$c7e10bfc0c59f67c","keyWhenFocused","focus","treeWalker","$cVkRF$getFocusableTreeWalker","document","activeElement","focusable","childFocusStrategy","$ab90dcbc1b5466d0$var$last","firstChild","$cVkRF$focusSafely","isPressed","onKeyDownCapture","walker","currentNode","nextNode","previousNode","preventDefault","stopPropagation","$cVkRF$scrollIntoViewport","containingElement","$cVkRF$getScrollParent","altKey","parentElement","dispatchEvent","KeyboardEvent","nativeEvent","$cVkRF$isFocusVisible","setFocusedKey","requestAnimationFrame","gridCellProps","_node_colIndex","colIndex","onPointerDown","el","tabindex","getAttribute","removeAttribute","setAttribute","last","lastChild","$7cb39d07f245a780$export$70e2eed1a92976ad","checkboxId","canSelectItem","onChange","select","checkboxProps"],"sources":["D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\index.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\GridKeyboardDelegate.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGrid.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\utils.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridSelectionAnnouncement.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\*.js","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useHighlightSelectionDescription.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridRowGroup.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridRow.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridCell.ts","D:\\TranThaiThanh_TranHuuMinhThuong_BaoCao_Nhom17\\frontend\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridSelectionCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {GridKeyboardDelegate} from './GridKeyboardDelegate';\nexport {useGrid} from './useGrid';\nexport {useGridRowGroup} from './useGridRowGroup';\nexport {useGridRow} from './useGridRow';\nexport {useGridCell} from './useGridCell';\nexport {useGridSelectionCheckbox} from './useGridSelectionCheckbox';\nexport {useHighlightSelectionDescription} from './useHighlightSelectionDescription';\nexport {useGridSelectionAnnouncement} from './useGridSelectionAnnouncement';\n\nexport type {GridProps, GridAria} from './useGrid';\nexport type {GridCellAria, GridCellProps} from './useGridCell';\nexport type {GridRowGroupAria} from './useGridRowGroup';\nexport type {GridRowProps, GridRowAria} from './useGridRow';\nexport type {GridKeyboardDelegateOptions} from './GridKeyboardDelegate';\nexport type {AriaGridSelectionCheckboxProps, GridSelectionCheckboxAria} from './useGridSelectionCheckbox';\nexport type {HighlightSelectionDescriptionProps} from './useHighlightSelectionDescription';\nexport type {GridSelectionAnnouncementProps} from './useGridSelectionAnnouncement';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Direction, Key, KeyboardDelegate, Node} from '@react-types/shared';\nimport {getChildNodes, getFirstItem, getLastItem, getNthItem} from '@react-stately/collections';\nimport {GridCollection} from '@react-types/grid';\nimport {Layout, Rect} from '@react-stately/virtualizer';\nimport {RefObject} from 'react';\n\nexport interface GridKeyboardDelegateOptions<T, C> {\n  collection: C,\n  disabledKeys: Set<Key>,\n  ref?: RefObject<HTMLElement>,\n  direction: Direction,\n  collator?: Intl.Collator,\n  layout?: Layout<Node<T>>,\n  focusMode?: 'row' | 'cell'\n}\n\nexport class GridKeyboardDelegate<T, C extends GridCollection<T>> implements KeyboardDelegate {\n  collection: C;\n  protected disabledKeys: Set<Key>;\n  protected ref: RefObject<HTMLElement>;\n  protected direction: Direction;\n  protected collator: Intl.Collator;\n  protected layout: Layout<Node<T>>;\n  protected focusMode;\n\n  constructor(options: GridKeyboardDelegateOptions<T, C>) {\n    this.collection = options.collection;\n    this.disabledKeys = options.disabledKeys;\n    this.ref = options.ref;\n    this.direction = options.direction;\n    this.collator = options.collator;\n    this.layout = options.layout;\n    this.focusMode = options.focusMode || 'row';\n  }\n\n  protected isCell(node: Node<T>) {\n    return node.type === 'cell';\n  }\n\n  protected isRow(node: Node<T>) {\n    return node.type === 'row' || node.type === 'item';\n  }\n\n  protected findPreviousKey(fromKey?: Key, pred?: (item: Node<T>) => boolean) {\n    let key = fromKey != null\n      ? this.collection.getKeyBefore(fromKey)\n      : this.collection.getLastKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!this.disabledKeys.has(key) && (!pred || pred(item))) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  protected findNextKey(fromKey?: Key, pred?: (item: Node<T>) => boolean) {\n    let key = fromKey != null\n      ? this.collection.getKeyAfter(fromKey)\n      : this.collection.getFirstKey();\n\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (!this.disabledKeys.has(key) && (!pred || pred(item))) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) {\n      return;\n    }\n\n    // If focus was on a cell, start searching from the parent row\n    if (this.isCell(startItem)) {\n      key = startItem.parentKey;\n    }\n\n    // Find the next item\n    key = this.findNextKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the next row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return getNthItem(getChildNodes(item, this.collection), startItem.index).key;\n      }\n\n      // Otherwise, focus the next row\n      if (this.focusMode === 'row') {\n        return key;\n      }\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    let startItem = this.collection.getItem(key);\n    if (!startItem) {\n      return;\n    }\n\n    // If focus is on a cell, start searching from the parent row\n    if (this.isCell(startItem)) {\n      key = startItem.parentKey;\n    }\n\n    // Find the previous item\n    key = this.findPreviousKey(key);\n    if (key != null) {\n      // If focus was on a cell, focus the cell with the same index in the previous row.\n      if (this.isCell(startItem)) {\n        let item = this.collection.getItem(key);\n        return getNthItem(getChildNodes(item, this.collection), startItem.index).key;\n      }\n\n      // Otherwise, focus the previous row\n      if (this.focusMode === 'row') {\n        return key;\n      }\n    }\n  }\n\n  getKeyRightOf(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      return;\n    }\n\n    // If focus is on a row, focus the first child cell.\n    if (this.isRow(item)) {\n      let children = getChildNodes(item, this.collection);\n      return this.direction === 'rtl'\n        ? getLastItem(children).key\n        : getFirstItem(children).key;\n    }\n\n    // If focus is on a cell, focus the next cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = getChildNodes(parent, this.collection);\n      let next = this.direction === 'rtl'\n        ? getNthItem(children, item.index - 1)\n        : getNthItem(children, item.index + 1);\n\n      if (next) {\n        return next.key;\n      }\n\n      // focus row only if focusMode is set to row\n      if (this.focusMode === 'row') {\n        return item.parentKey;\n      }\n\n      return this.direction === 'rtl' ? this.getFirstKey(key) : this.getLastKey(key);\n    }\n  }\n\n  getKeyLeftOf(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      return;\n    }\n\n    // If focus is on a row, focus the last child cell.\n    if (this.isRow(item)) {\n      let children = getChildNodes(item, this.collection);\n      return this.direction === 'rtl'\n        ? getFirstItem(children).key\n        : getLastItem(children).key;\n    }\n\n    // If focus is on a cell, focus the previous cell if any,\n    // otherwise focus the parent row.\n    if (this.isCell(item)) {\n      let parent = this.collection.getItem(item.parentKey);\n      let children = getChildNodes(parent, this.collection);\n      let prev = this.direction === 'rtl'\n        ? getNthItem(children, item.index + 1)\n        : getNthItem(children, item.index - 1);\n\n      if (prev) {\n        return prev.key;\n      }\n\n      // focus row only if focusMode is set to row\n      if (this.focusMode === 'row') {\n        return item.parentKey;\n      }\n\n      return this.direction === 'rtl' ? this.getLastKey(key) : this.getFirstKey(key);\n    }\n  }\n\n  getFirstKey(key?: Key, global?: boolean) {\n    let item: Node<T>;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) {\n        return;\n      }\n\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the first cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        return getFirstItem(getChildNodes(parent, this.collection)).key;\n      }\n    }\n\n    // Find the first row\n    key = this.findNextKey();\n\n    // If global flag is set (or if focus mode is cell), focus the first cell in the first row.\n    if ((key != null && item && this.isCell(item) && global) || this.focusMode === 'cell') {\n      let item = this.collection.getItem(key);\n      key = getFirstItem(getChildNodes(item, this.collection)).key;\n    }\n\n    // Otherwise, focus the row itself.\n    return key;\n  }\n\n  getLastKey(key?: Key, global?: boolean) {\n    let item: Node<T>;\n    if (key != null) {\n      item = this.collection.getItem(key);\n      if (!item) {\n        return;\n      }\n\n      // If global flag is not set, and a cell is currently focused,\n      // move focus to the last cell in the parent row.\n      if (this.isCell(item) && !global) {\n        let parent = this.collection.getItem(item.parentKey);\n        let children = getChildNodes(parent, this.collection);\n        return getLastItem(children).key;\n      }\n    }\n\n    // Find the last row\n    key = this.findPreviousKey();\n\n    // If global flag is set (or if focus mode is cell), focus the last cell in the last row.\n    if ((key != null && item && this.isCell(item) && global) || this.focusMode === 'cell') {\n      let item = this.collection.getItem(key);\n      let children = getChildNodes(item, this.collection);\n      key = getLastItem(children).key;\n    }\n\n    // Otherwise, focus the row itself.\n    return key;\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${CSS.escape(key.toString())}\"]`);\n  }\n\n  private getItemRect(key: Key): Rect {\n    if (this.layout) {\n      return this.layout.getLayoutInfo(key)?.rect;\n    }\n\n    let item = this.getItem(key);\n    if (item) {\n      return new Rect(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);\n    }\n  }\n\n  private getPageHeight(): number {\n    if (this.layout) {\n      return this.layout.virtualizer?.visibleRect.height;\n    }\n\n    return this.ref?.current?.offsetHeight;\n  }\n\n  private getContentHeight(): number {\n    if (this.layout) {\n      return this.layout.getContentSize().height;\n    }\n\n    return this.ref?.current?.scrollHeight;\n  }\n\n  getKeyPageAbove(key: Key) {\n    let itemRect = this.getItemRect(key);\n    if (!itemRect) {\n      return null;\n    }\n\n    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());\n\n    while (itemRect && itemRect.y > pageY) {\n      key = this.getKeyAbove(key);\n      itemRect = this.getItemRect(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let itemRect = this.getItemRect(key);\n\n    if (!itemRect) {\n      return null;\n    }\n\n    let pageHeight = this.getPageHeight();\n    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);\n\n    while (itemRect && itemRect.maxY < pageY) {\n      let nextKey = this.getKeyBelow(key);\n      itemRect = this.getItemRect(nextKey);\n\n      // Guard against case where maxY of the last key is barely less than pageY due to rounding\n      // and thus it attempts to set key to null\n      if (nextKey != null) {\n        key = nextKey;\n      }\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey ?? this.getFirstKey();\n\n    // If the starting key is a cell, search from its parent row.\n    let startItem = collection.getItem(key);\n    if (startItem.type === 'cell') {\n      key = startItem.parentKey;\n    }\n\n    let hasWrapped = false;\n    while (key != null) {\n      let item = collection.getItem(key);\n\n      // check row text value for match\n      if (item.textValue) {\n        let substring = item.textValue.slice(0, search.length);\n        if (this.collator.compare(substring, search) === 0) {\n          if (this.isRow(item) && this.focusMode === 'cell') {\n            return getFirstItem(getChildNodes(item, this.collection)).key;\n          }\n\n          return item.key;\n        }\n      }\n\n      key = this.findNextKey(key);\n\n      // Wrap around when reaching the end of the collection\n      if (key == null && !hasWrapped) {\n        key = this.getFirstKey();\n        hasWrapped = true;\n      }\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, Key, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {GridCollection} from '@react-types/grid';\nimport {GridKeyboardDelegate} from './GridKeyboardDelegate';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {RefObject, useCallback, useMemo} from 'react';\nimport {useCollator, useLocale} from '@react-aria/i18n';\nimport {useGridSelectionAnnouncement} from './useGridSelectionAnnouncement';\nimport {useHasTabbableChild} from '@react-aria/focus';\nimport {useHighlightSelectionDescription} from './useHighlightSelectionDescription';\nimport {useSelectableCollection} from '@react-aria/selection';\n\nexport interface GridProps extends DOMProps, AriaLabelingProps {\n  /** Whether the grid uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether initial grid focus should be placed on the grid row or grid cell.\n   * @default 'row'\n   */\n  focusMode?: 'row' | 'cell',\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string,\n  /**\n   * The ref attached to the scrollable body. Used to provided automatic scrolling on item focus for non-virtualized grids.\n   */\n  scrollRef?: RefObject<HTMLElement>,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** Handler that is called when a user performs an action on the cell. */\n  onCellAction?: (key: Key) => void\n}\n\nexport interface GridAria {\n  /** Props for the grid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a grid component.\n * A grid displays data in one or more rows and columns and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the grid.\n * @param state - State for the grid, as returned by `useGridState`.\n * @param ref - The ref attached to the grid element.\n */\nexport function useGrid<T>(props: GridProps, state: GridState<T, GridCollection<T>>, ref: RefObject<HTMLElement>): GridAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    focusMode,\n    scrollRef,\n    getRowText,\n    onRowAction,\n    onCellAction\n  } = props;\n  let {selectionManager: manager} = state;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let {direction} = useLocale();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = useMemo(() => keyboardDelegate || new GridKeyboardDelegate({\n    collection: state.collection,\n    disabledKeys: disabledBehavior === 'selection' ? new Set() : state.disabledKeys,\n    ref,\n    direction,\n    collator,\n    focusMode\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, focusMode]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    isVirtualized,\n    scrollRef\n  });\n\n  let id = useId(props.id);\n  gridMap.set(state, {keyboardDelegate: delegate, actions: {onRowAction, onCellAction}});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: manager,\n    hasItemActions: !!(onRowAction || onCellAction)\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  let onFocus = useCallback((e) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n  }, [manager]);\n\n  // Continue to track collection focused state even if keyboard navigation is disabled\n  let navDisabledHandlers = useMemo(() => ({\n    onBlur: collectionProps.onBlur,\n    onFocus\n  }), [onFocus, collectionProps.onBlur]);\n\n  let hasTabbableChild = useHasTabbableChild(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n\n  let gridProps: DOMAttributes = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': manager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps,\n    // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n    state.collection.size === 0 && {tabIndex: hasTabbableChild ? -1 : 0},\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = state.collection.columnCount;\n  }\n\n  useGridSelectionAnnouncement({getRowText}, state);\n  return {\n    gridProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {GridCollection} from '@react-types/grid';\nimport type {GridState} from '@react-stately/grid';\nimport type {Key, KeyboardDelegate} from '@react-types/shared';\n\ninterface GridMapShared {\n  keyboardDelegate: KeyboardDelegate,\n  actions: {\n    onRowAction: (key: Key) => void,\n    onCellAction: (key: Key) => void\n  }\n}\n\n// Used to share:\n// keyboard delegate between useGrid and useGridCell\n// onRowAction/onCellAction across hooks\nexport const gridMap = new WeakMap<GridState<unknown, GridCollection<unknown>>, GridMapShared>();\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {Collection, Key, Node, Selection} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {SelectionManager} from '@react-stately/selection';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useRef} from 'react';\nimport {useUpdateEffect} from '@react-aria/utils';\n\nexport interface GridSelectionAnnouncementProps {\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string\n}\n\ninterface GridSelectionState<T> {\n  /** A collection of items in the grid. */\n  collection: Collection<Node<T>>,\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\nexport function useGridSelectionAnnouncement<T>(props: GridSelectionAnnouncementProps, state: GridSelectionState<T>) {\n  let {\n    getRowText = (key) => state.collection.getTextValue?.(key) ?? state.collection.getItem(key)?.textValue\n  } = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = useRef(selection);\n  useUpdateEffect(() => {\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n\n      return;\n    }\n\n    let addedKeys = diffSelection(selection, lastSelection.current);\n    let removedKeys = diffSelection(lastSelection.current, selection);\n\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n\n    if ((state.selectionManager.selectedKeys.size === 1 && isReplace)) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) {\n          messages.push(stringFormatter.format('selectedItem', {item: currentSelectionText}));\n        }\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) {\n        messages.push(stringFormatter.format('selectedItem', {item: addedText}));\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) {\n          messages.push(stringFormatter.format('deselectedItem', {item: removedText}));\n        }\n      }\n    }\n\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current?.size > 1) {\n        messages.push(selection === 'all'\n          ? stringFormatter.format('selectedAll')\n          : stringFormatter.format('selectedCount', {count: selection.size})\n        );\n      }\n    }\n\n    if (messages.length > 0) {\n      announce(messages.join(' '));\n    }\n\n    lastSelection.current = selection;\n  }, [selection]);\n}\n\nfunction diffSelection(a: Selection, b: Selection): Set<Key> {\n  let res = new Set<Key>();\n  if (a === 'all' || b === 'all') {\n    return res;\n  }\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n","const _temp0 = require(\"../intl/ar-AE.json\");\nconst _temp1 = require(\"../intl/bg-BG.json\");\nconst _temp2 = require(\"../intl/cs-CZ.json\");\nconst _temp3 = require(\"../intl/da-DK.json\");\nconst _temp4 = require(\"../intl/de-DE.json\");\nconst _temp5 = require(\"../intl/el-GR.json\");\nconst _temp6 = require(\"../intl/en-US.json\");\nconst _temp7 = require(\"../intl/es-ES.json\");\nconst _temp8 = require(\"../intl/et-EE.json\");\nconst _temp9 = require(\"../intl/fi-FI.json\");\nconst _temp10 = require(\"../intl/fr-FR.json\");\nconst _temp11 = require(\"../intl/he-IL.json\");\nconst _temp12 = require(\"../intl/hr-HR.json\");\nconst _temp13 = require(\"../intl/hu-HU.json\");\nconst _temp14 = require(\"../intl/it-IT.json\");\nconst _temp15 = require(\"../intl/ja-JP.json\");\nconst _temp16 = require(\"../intl/ko-KR.json\");\nconst _temp17 = require(\"../intl/lt-LT.json\");\nconst _temp18 = require(\"../intl/lv-LV.json\");\nconst _temp19 = require(\"../intl/nb-NO.json\");\nconst _temp20 = require(\"../intl/nl-NL.json\");\nconst _temp21 = require(\"../intl/pl-PL.json\");\nconst _temp22 = require(\"../intl/pt-BR.json\");\nconst _temp23 = require(\"../intl/pt-PT.json\");\nconst _temp24 = require(\"../intl/ro-RO.json\");\nconst _temp25 = require(\"../intl/ru-RU.json\");\nconst _temp26 = require(\"../intl/sk-SK.json\");\nconst _temp27 = require(\"../intl/sl-SI.json\");\nconst _temp28 = require(\"../intl/sr-SP.json\");\nconst _temp29 = require(\"../intl/sv-SE.json\");\nconst _temp30 = require(\"../intl/tr-TR.json\");\nconst _temp31 = require(\"../intl/uk-UA.json\");\nconst _temp32 = require(\"../intl/zh-CN.json\");\nconst _temp33 = require(\"../intl/zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useDescription} from '@react-aria/utils';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useMemo} from 'react';\n\nexport interface HighlightSelectionDescriptionProps {\n  selectionManager: MultipleSelectionManager,\n  hasItemActions?: boolean\n}\n\n/**\n * Computes the description for a grid selectable collection.\n * @param props\n */\nexport function useHighlightSelectionDescription(props: HighlightSelectionDescriptionProps): AriaLabelingProps {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n  let modality = useInteractionModality();\n  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page\n  let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null)\n    && typeof window !== 'undefined' && 'ontouchstart' in window;\n\n  let interactionDescription = useMemo(() => {\n    let selectionMode = props.selectionManager.selectionMode;\n    let selectionBehavior = props.selectionManager.selectionBehavior;\n\n    let message = undefined;\n    if (shouldLongPress) {\n      message = stringFormatter.format('longPressToSelect');\n    }\n\n    return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;\n  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, stringFormatter, shouldLongPress]);\n\n  let descriptionProps = useDescription(interactionDescription);\n  return descriptionProps;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\n\nexport interface GridRowGroupAria {\n  /** Props for the row group element. */\n  rowGroupProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for a row group in a grid.\n */\nexport function useGridRowGroup(): GridRowGroupAria {\n  return {\n    rowGroupProps: {\n      role: 'rowgroup'\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {GridCollection, GridNode} from '@react-types/grid';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {RefObject} from 'react';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface GridRowProps<T> {\n  /** An object representing the grid row. Contains all the relevant information that makes up the grid row. */\n  node: GridNode<T>,\n  /** Whether the grid row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\nexport interface GridRowAria extends SelectableItemStates {\n  /** Props for the grid row element. */\n  rowProps: DOMAttributes,\n  /** Whether the row is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid.\n * @param props - Props for the row.\n * @param state - State of the parent grid, as returned by `useGridState`.\n */\nexport function useGridRow<T, C extends GridCollection<T>, S extends GridState<T, C>>(props: GridRowProps<T>, state: S, ref: RefObject<FocusableElement>): GridRowAria {\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction\n  } = props;\n\n  let {actions: {onRowAction}} = gridMap.get(state);\n  let {itemProps, ...states} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onRowAction ? () => onRowAction(node.key) : onAction,\n    isDisabled: state.collection.size === 0\n  });\n\n  let isSelected = state.selectionManager.isSelected(node.key);\n\n  let rowProps: DOMAttributes = {\n    role: 'row',\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,\n    'aria-disabled': states.isDisabled || undefined,\n    ...itemProps\n  };\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  }\n\n  return {\n    rowProps,\n    ...states\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {getScrollParent, mergeProps, scrollIntoViewport} from '@react-aria/utils';\nimport {GridCollection, GridNode} from '@react-types/grid';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {isFocusVisible} from '@react-aria/interactions';\nimport {KeyboardEvent as ReactKeyboardEvent, RefObject, useRef} from 'react';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface GridCellProps {\n  /** An object representing the grid cell. Contains all the relevant information that makes up the grid cell. */\n  node: GridNode<unknown>,\n  /** Whether the grid cell is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether the cell or its first focusable child element should be focused when the grid cell is focused. */\n  focusMode?: 'child' | 'cell',\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\nexport interface GridCellAria {\n  /** Props for the grid cell element. */\n  gridCellProps: DOMAttributes,\n  /** Whether the cell is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a cell in a grid.\n * @param props - Props for the cell.\n * @param state - State of the parent grid, as returned by `useGridState`.\n */\nexport function useGridCell<T, C extends GridCollection<T>>(props: GridCellProps, state: GridState<T, C>, ref: RefObject<FocusableElement>): GridCellAria {\n  let {\n    node,\n    isVirtualized,\n    focusMode = 'child',\n    shouldSelectOnPressUp,\n    onAction\n  } = props;\n\n  let {direction} = useLocale();\n  let {keyboardDelegate, actions: {onCellAction}} = gridMap.get(state);\n\n  // We need to track the key of the item at the time it was last focused so that we force\n  // focus to go to the item when the DOM node is reused for a different item in a virtualizer.\n  let keyWhenFocused = useRef(null);\n\n  // Handles focusing the cell. If there is a focusable child,\n  // it is focused, otherwise the cell itself is focused.\n  let focus = () => {\n    let treeWalker = getFocusableTreeWalker(ref.current);\n    if (focusMode === 'child') {\n      // If focus is already on a focusable child within the cell, early return so we don't shift focus\n      if (ref.current.contains(document.activeElement) && ref.current !== document.activeElement) {\n        return;\n      }\n\n      let focusable = state.selectionManager.childFocusStrategy === 'last'\n        ? last(treeWalker)\n        : treeWalker.firstChild() as FocusableElement;\n      if (focusable) {\n        focusSafely(focusable);\n        return;\n      }\n    }\n\n    if (\n      (keyWhenFocused.current != null && node.key !== keyWhenFocused.current) ||\n      !ref.current.contains(document.activeElement)\n    ) {\n      focusSafely(ref.current);\n    }\n  };\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    focus,\n    shouldSelectOnPressUp,\n    onAction: onCellAction ? () => onCellAction(node.key) : onAction,\n    isDisabled: state.collection.size === 0\n  });\n\n  let onKeyDownCapture = (e: ReactKeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target as Element) || state.isKeyboardNavigationDisabled) {\n      return;\n    }\n\n    let walker = getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    switch (e.key) {\n      case 'ArrowLeft': {\n        // Find the next focusable element within the cell.\n        let focusable = direction === 'rtl'\n          ? walker.nextNode() as FocusableElement\n          : walker.previousNode() as FocusableElement;\n\n        // Don't focus the cell itself if focusMode is \"child\"\n        if (focusMode === 'child' && focusable === ref.current) {\n          focusable = null;\n        }\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n          scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n        } else {\n          // If there is no next focusable child, then move to the next cell to the left of this one.\n          // This will be handled by useSelectableCollection. However, if there is no cell to the left\n          // of this one, only one column, and the grid doesn't focus rows, then the next key will be the\n          // same as this one. In that case we need to handle focusing either the cell or the first/last\n          // child, depending on the focus mode.\n          let prev = keyboardDelegate.getKeyLeftOf(node.key);\n          if (prev !== node.key) {\n            break;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          if (focusMode === 'cell' && direction === 'rtl') {\n            focusSafely(ref.current);\n            scrollIntoViewport(ref.current, {containingElement: getScrollParent(ref.current)});\n          } else {\n            walker.currentNode = ref.current;\n            focusable = direction === 'rtl'\n              ? walker.firstChild() as FocusableElement\n              : last(walker);\n            if (focusable) {\n              focusSafely(focusable);\n              scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        let focusable = direction === 'rtl'\n          ? walker.previousNode() as FocusableElement\n          : walker.nextNode() as FocusableElement;\n\n        if (focusMode === 'child' && focusable === ref.current) {\n          focusable = null;\n        }\n\n        if (focusable) {\n          e.preventDefault();\n          e.stopPropagation();\n          focusSafely(focusable);\n          scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n        } else {\n          let next = keyboardDelegate.getKeyRightOf(node.key);\n          if (next !== node.key) {\n            break;\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          if (focusMode === 'cell' && direction === 'ltr') {\n            focusSafely(ref.current);\n            scrollIntoViewport(ref.current, {containingElement: getScrollParent(ref.current)});\n          } else {\n            walker.currentNode = ref.current;\n            focusable = direction === 'rtl'\n              ? last(walker)\n              : walker.firstChild() as FocusableElement;\n            if (focusable) {\n              focusSafely(focusable);\n              scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate\n        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target as Element)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(\n            new KeyboardEvent(e.nativeEvent.type, e.nativeEvent)\n          );\n        }\n        break;\n    }\n  };\n\n  // Grid cells can have focusable elements inside them. In this case, focus should\n  // be marshalled to that element rather than focusing the cell itself.\n  let onFocus = (e) => {\n    keyWhenFocused.current = node.key;\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the gridcell itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row/cell\n      // in that case since the table should act like a single tab stop.\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocusedKey(node.key);\n      }\n      return;\n    }\n\n    // If the cell itself is focused, wait a frame so that focus finishes propagatating\n    // up to the tree, and move focus to a focusable child if possible.\n    requestAnimationFrame(() => {\n      if (focusMode === 'child' && document.activeElement === ref.current) {\n        focus();\n      }\n    });\n  };\n\n  let gridCellProps: DOMAttributes = mergeProps(itemProps, {\n    role: 'gridcell',\n    onKeyDownCapture,\n    onFocus\n  });\n\n  if (isVirtualized) {\n    gridCellProps['aria-colindex'] = (node.colIndex ?? node.index) + 1; // aria-colindex is 1-based\n  }\n\n  // When pressing with a pointer and cell selection is not enabled, usePress will be applied to the\n  // row rather than the cell. However, when the row is draggable, usePress cannot preventDefault\n  // on pointer down, so the browser will try to focus the cell which has a tabIndex applied.\n  // To avoid this, remove the tabIndex from the cell briefly on pointer down.\n  if (shouldSelectOnPressUp && gridCellProps.tabIndex != null && gridCellProps.onPointerDown == null) {\n    gridCellProps.onPointerDown = (e) => {\n      let el = e.currentTarget;\n      let tabindex = el.getAttribute('tabindex');\n      el.removeAttribute('tabindex');\n      requestAnimationFrame(() => {\n        el.setAttribute('tabindex', tabindex);\n      });\n    };\n  }\n\n  return {\n    gridCellProps,\n    isPressed\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n","import {AriaCheckboxProps} from '@react-types/checkbox';\nimport {GridCollection} from '@react-types/grid';\nimport {GridState} from '@react-stately/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Key} from '@react-types/shared';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaGridSelectionCheckboxProps {\n  /** A unique key for the checkbox. */\n  key: Key\n}\n\nexport interface GridSelectionCheckboxAria {\n  /** Props for the row selection checkbox element. */\n  checkboxProps: AriaCheckboxProps\n}\n\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a grid.\n * @param props - Props for the selection checkbox.\n * @param state - State of the grid, as returned by `useGridState`.\n */\nexport function useGridSelectionCheckbox<T, C extends GridCollection<T>>(props: AriaGridSelectionCheckboxProps, state: GridState<T, C>): GridSelectionCheckboxAria {\n  let {key} = props;\n\n  let manager = state.selectionManager;\n  let checkboxId = useId();\n  let isDisabled = !state.selectionManager.canSelectItem(key);\n  let isSelected = state.selectionManager.isSelected(key);\n\n  let onChange = () => manager.select(key);\n\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  return {\n    checkboxProps: {\n      id: checkboxId,\n      'aria-label': stringFormatter.format('select'),\n      isSelected,\n      isDisabled,\n      onChange\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}